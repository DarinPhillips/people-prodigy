<?php
/*---------------------------------------------------------------------
-----------------------------------------------------------------------
CLASS :common
AUTHOR:info@chrisrajana.com
UPDATED:Sep 10 2003

DESCRIPTION:
This class handles all the common routines of this project

METHODS:

-----------------------------------------------------------------------
----------------------------------------------------------------------*/

class common
{
	var $username;
	var $password;
	var $adminid;
	var $min_logout_time;
	var $lfvar;
	var $cavar;
	var $pfvar;
	var $covar;

function common() // constructor
{
	$this->username="admin";  // admin username
	$this->password="admin"; // admin password
	//$this-adminid=9999;  
	$this->min_logout_time=20;  // time considered for expiry of session (in minutes)

	$this->prefix="";
	//$this->q_cnt=8;
	$this->pagelimit=
	$this->login_mode="test";

$this->path="d:/work/Pms/";
$this->http_path="http://192.168.0.4/first/PMS";


/*
	$this->path="/var/www/html/Pms/";
	$this->http_path="http://www.cat45.com/Pms";
*/	

	//installation_start
	$this->lfvar="25a9ac406aceb47a0c6cade972bc26fa";
	$this->cavar="8ae1016c4044ea668c4db3f57e3cc7f1";
	$this->pfvar="c05f6c233521207f6fe311afef550c3c";
	$this->covar="a74ad8dfacd4f985eb3977517615ce25";
	//installation_end

}


//----------------------------------------------



//-------------------------------------

function get_chain_above($position,$db_object,$twodarr)
  {
    static $twodarr;
    //static $twodcnt = 0;

	
	$position_table = $this->prefix_table("position");
		

		$qry1 = "select boss_no from $position_table where pos_id='$position'";
		//echo "qry1 = $qry1<br><br><br>";
		$posres = $db_object->get_single_column($qry1);  
		//print_r($posres);
		//echo "<br><br>";
		if (count($posres) > 0)
		{
			
		       foreach ($posres as $user_id)
		       {
			
			$id[0]=$user_id;
			$twodarr = array_merge ($twodarr,$id);
			$this->get_chain_above($user_id,$db_object,$twodarr);
		       }
		}
		    return $twodarr;
  }//function ens


//---------------------------------------------------------------------

function get_chain_below($position,$db_object,$twodarr)
	{
		static $twodarr;
		static $twodcnt = 0;
		$position_table = $this->prefix_table("position");
		

		$qry1 = "select pos_id from $position_table where boss_no='$position'";
		//echo "qry1 = $qry1<br><br><br>";
		$posres = $db_object->get_single_column($qry1);  

		if (count($posres) > 0)
		{
			
		       foreach ($posres as $user_id)
		       {
			
			$id[0]=$user_id;
			$twodarr = array_merge ($twodarr,$id);
			$this->get_chain_below($user_id,$db_object,$twodarr);
		       }
		}
		    return $twodarr;
	}//function ends


//----------------------------------------

///----------------------
function is_module_purchased($db_object,$root_path,$filecontent)
	{
	$handle=opendir($root_path);
	$lfvar=$this->lfvar;
	$cavar=$this->cavar;
	$pfvar=$this->pfvar;
	$covar=$this->covar;
		
	//$our_collection=array($lfvar,$cavar,$fpvar,$covar);
	$our_collection=array($lfvar);
	$flag=0;
	while (false !== ($file = readdir($handle))) 
		{ 

		$full_path=$root_path."/".$file;

			if(is_dir($file))
			{			
				if(in_array(md5($file),$our_collection))
				{
					$flag=1;
					//$pattern="/<{".md5($file)."_start(.*?)<{".md5($file)."_end}>/s";
					//preg_replace($pattern,"",$filecontent);					
				}	
				
			}		
		}
		if($flag==1)
		{
			$pattern="/<!--space_start/s";
			$pattern1="/space_end-->/s";
			$filecontent =preg_replace($pattern,"",$filecontent);
			$filecontent =preg_replace($pattern1,"",$filecontent);
		}
		else
		{
					
			$pattern="/<!--space_start(.*?)space_end-->/s"	;
			$filecontent = preg_replace($pattern,"",$filecontent);
		}			
		closedir($handle); 	
	return $filecontent;		
	}
//-----------------------

//------------Retriving user id-----------------------------
function get_user_id($db_object,$position)
{
	$user_table = $this->prefix_table("user_table");
	$split = @implode("','",$position);	
	$retuser = "select user_id,username,email,office_phone from $user_table where position in ('$split')";
	$retres  = $db_object->get_rsltset($retuser);
	return $retres;

}
//-----------------------------------------




//No of Answers per question...

function view_plan($db_object,$user_id,$default,$temp_name,$cat_table,$met_table,$lang_table,$perform_table)
		{
			
			$setting = $this->prefix_table("$perform_table");
			$qry = "select category,metrics from $setting";
			$res = $db_object->get_a_line($qry);
			$cat  = $res['category'];
			$met = $res['metrics'];			
			$path = $this->path;
			$path  = $path."templates/performance/".$temp_name;
			$file = $this->return_file_content($db_object,$path);
			$uid["uid"]= "$user_id";
			$file = $this->direct_replace($db_object,$file,$uid);
			
			$tempcat = $this->prefix_table("$cat_table");
				$disqry = "select count(user_id) from $tempcat where user_id='$user_id'";
				$disres = $db_object->get_single_column($disqry);
				$present = $disres[0];
				
			$fl = 0;
		//Change the user_id to main admin if the present value=0
			if($present=='0')
			{
				$user_id='1';
				$fl = 1;
			}

			$metrics = $this->prefix_table("$met_table");
			$language = $this->prefix_table("$lang_table");
			
			//language
			$desc = "desc $language";
			$des = $db_object->get_single_column($desc);
			$spl = implode(",",$des);
			$lg  = "select $spl from $language";
			$rslt = $db_object->get_rsltset($lg);

	
			$lang = "select $spl from $language where lang_id='$default'";
			$lres = $db_object->get_a_line($lang);
			
			$no = "select lang_id from $language";
			$lno = $db_object->get_single_column($no);
			//----------
			$desc = "desc $tempcat";
			$des = $db_object->get_single_column($desc);
			$sp = implode(",",$des);		

		
			$qry = "select $sp from $tempcat where user_id='$user_id' order by cat_id";

			$tcat = $db_object->get_rsltset($qry);
			
			$pattern="/<{category_loopstart}>(.*?)<{category_loopend}>/s";
			preg_match($pattern,$file,$arr);
			$match=$arr[0];
			$str="";
			$count = 0;
			
			$pattern1="/<{metrics_loopstart}>(.*?)<{metrics_loopend}>/s";
			preg_match($pattern1,$match,$arr1);
			$inc = 0;
			
			$ct = count($lno);
			$dy=0;
			$c= 0;
			$lg = "lang_".$default;



			for($l=0;$l<count($lno);$l++)
			{
				$max = "select max(met_id) from $metrics";
			$res = $db_object->get_single_column($max);
			$maxid = $res[0];


			$maxc = "select max(cat_id) from $tempcat";
			$res = $db_object->get_single_column($maxc);
			$maxcid = $res[0];

				$count=0;
				$lang_id = $rslt[$l]['lang_id'];
				$lvar="lang_".$lang_id;
				//$language = $lres["$lvar"];
				$language = $rslt[$l][$lg];
			for($i=0;$i<$cat;$i++)
			{
				$match1=$arr1[0];
				$new = "";
				$str1 = "";
				$ct = 0;
				$count =  $count + 1;

				if($tcat[$i][cat_id]!="")
				{
					
					$c = $tcat[$i][cat_id];
					$qry = "select metrics_$lang_id,cat_id,met_id from $metrics where user_id='$user_id' and cat_id='$c' order by met_id limit 0,$met";			
					$tmet = $db_object->get_rsltset($qry);					
					if($fl=='1')
					{
						$maxcid = $maxcid + 1;
						$c = $maxcid;
						$new = "new";
						
					}

				}
				else 
				{
					$maxcid = $maxcid + 1;
					$c = $maxcid;
					$new = "new";
					$tmet=array();	
				}
				

				
				for($j=0;$j<$met;$j++)
				{
					$ct = $j+1;
					$m = $tmet[$j][cat_id];
					//echo "c=$c : m=$m<br>";
					//if($c==$m)
					{
						$mval = $tmet[$j][0];
					}
					//else
					{
						
					}
					
					if($tmet[$j]['met_id']!="")
					{
						$me = $tmet[$j]['met_id'];
						if($fl=='1')
						{
							$maxid = $maxid + 1;
							$me = $j+1;
							$mnew = "new";
						}
					}
					else
					{
						
						$maxid = $maxid + 1;
						$me = $j+1;
						$mnew = "new";
						
					}



					$str1.=preg_replace("/\<\{(.*?)\}\>/e","$$1",$match1);
					$inc = $inc  + 1;
					$mnew="";
					$mval="";
				}
				$temp	= preg_replace($pattern1,$str1,$match);
				$catg = "category_"."$lang_id";
				$cval = $tcat[$i][$catg];
				$str.=preg_replace("/\<\{(.*?)\}\>/e","$$1",$temp);
				
			}

		}	
			$file=preg_replace($pattern,$str,$file);
		
			echo $file;
		}//end view

function delete_position($db_object)
{

/* delete only the tables related to the modules bought*/

	$delete["position_table"]=$this->prefix_table("position");
	$delete["family_position_table"]=$this->prefix_table("family_position");
//	$delete["user_table"]=$this->prefix_table("user_table");
	$delete["temp_user_table"]=$this->prefix_table("temp_user_table");
	$delete["skill_builder"]=$this->prefix_table("skill_builder");
	$delete["objectives"]=$this->prefix_table("objectives");
	$delete["activites"]=$this->prefix_table("activites");
	$delete["skills_for_activites"]=$this->prefix_table("skills_for_activites");
	$delete["skills"]=$this->prefix_table("skills");
	$delete["temp_skill_builder"]=$this->prefix_table("temp_skill_builder");
	$delete["temp_objectives"]=$this->prefix_table("temp_objectives");
	$delete["temp_activites"]=$this->prefix_table("temp_activites");
	$delete["temp_skills_for_activites"]=$this->prefix_table("temp_skills_for_activites");
	$delete["unapproved_skill_builder"]=$this->prefix_table("unapproved_skill_builder");
	$delete["unapproved_objectives"]=$this->prefix_table("unapproved_objectives");
	$delete["unapproved_activites"]=$this->prefix_table("unapproved_activites");
	$delete["unapproved_skills_for_activites"]=$this->prefix_table("unapproved_skills_for_activites");
	$delete["skills"]=$this->prefix_table("skills");
	while(list($kk,$vv)=@each($delete))
	{
		$mysql="delete from '$vv'";
	//	$db_object->insert($mysql);
		echo "$mysql<br>";
	}

	$user_table=$this->prefix_table("user_table");
	$mysql="update $user_table set position=0";
	//$db_object->insert($mysql);
	echo "$mysql<br>";
	echo "You have to Rebuild the Whole Organisation <br>";
}




function answerCount($db_object)
{

	$config_table = $this->prefix_table("config");

	$mysql = "select answer_count from $config_table";
	$ans_arr = $db_object->get_a_line($mysql);
	$ans_cnt = $ans_arr["answer_count"];
	return $ans_cnt;
}
//-------------fucntion to return the admins of an employe  with certain charecteristics-----------------------------------
function return_my_admin($db_object,$charec)
{
$admins=$this->prefix_table("admins");
while(list($kk,$vv)=@each($charec))
{
$$kk=$vv;
}
/*$mysql="select distinct($admins.user_id) as admin_id from $admins,
	$admins as adm1,$admins as adm2,$admins as adm3,
	$admins as adm4,$admins as adm5
	where $admins.user_id=adm1.user_id and 
	$admins.user_id=adm2.user_id and 
	$admins.user_id=adm3.user_id and
	$admins.user_id=adm4.user_id and
	$admins.user_id=adm5.user_id and 
	$admins.emp_type_id='$employment_type' and 
	adm1.boss_id='$boss_id' and  
	adm2.pos_id='$pos_id' and 
 	adm3.location_id='$location_id' and 
	adm4.fam_id ='$family_id' and
	adm5.level_id='$level_no'";
	$admin_idset=$db_object->get_rsltset($mysql);*/


	$mysql="select distinct(user_id) from $admins";
	$result=$db_object->get_single_column($mysql);

//print_r($result);

		$mysql="select user_id from $admins where emp_type_id='$employment_type'";
		$admin_idset[0]=$db_object->get_single_column($mysql);
	
		if(count($admin_idset[0])!=0)
		{
			$result1=array_intersect($result,$admin_idset[0]);
			if(count($result1)!=0)
			{
				$result=$result1;
			}
			
		}
	

	
		$mysql="select user_id from $admins where level_id='$level_no'";
		$admin_idset[1]=$db_object->get_single_column($mysql);
	
	
		if(count($admin_idset[1])!=0)
		{
			$result1=array_intersect($result,$admin_idset[1]);
			if(count($result1)!=0)
			{
				$result=$result1;
			}
		}
	
	
		$mysql="select user_id from $admins where boss_id='$boss_id'";
		$admin_idset[2]=$db_object->get_single_column($mysql);
		if(count($admin_idset[2])!=0)
		{
			$result1=array_intersect($result,$admin_idset[2]);
			if(count($result1)!=0)
			{
				$result=$result1;
			}
		}
		
		$mysql="select user_id from $admins where location_id='$location_id'";
		$admin_idset[3]=$db_object->get_single_column($mysql);
		if(count($admin_idset[3])!=0)
		{
			$result1=array_intersect($result,$admin_idset[3]);
			if(count($result1)!=0)
			{
				$result=$result1;
			}
		}

		
		$mysql="select user_id from $admins where fam_id='$family_id'";
		$admin_idset[4]=$db_object->get_single_column($mysql);
		if(count($admin_idset[4])!=0)
		{
			$result1=array_intersect($result,$admin_idset[4]);
			if(count($result1)!=0)
			{
				$result=$result1;
			}
		}


		$mysql="select user_id from $admins where pos_id='$pos_id'";
		$admin_idset[5]=$db_object->get_single_column($mysql);
		if(count($admin_idset[5])!=0)
		{
		$result=array_intersect($result,$admin_idset[5]);
		}


$result=$result[0];
return $result;


}
//--------------------fucntion ends---------------------
//-----------this funtion deletes an employee completely from oragnisation providee the user_id

function delete_employee($db_object,$user_id)
{


	
$skill_builder=$this->prefix_table("skill_builder");
$mysql="delete from $skill_builder where emp_id='$user_id'";
$db_object->insert($mysql);

$temp_skill_builder=$this->prefix_table("temp_skill_builder");
$mysql="delete from $temp_skill_builder where emp_id='$user_id'";
$db_object->insert($mysql);

$user_eeo=$this->prefix_table("user_eeo");
$mysql="delete from $user_eeo where user_id='$user_id'";
$db_object->insert($mysql);

$temp_user_eeo=$this->prefix_table("temp_user_eeo");
$mysql="delete from $temp_user_eeo where user_id='$user_id'";
$db_object->insert($mysql);

$user_table=$this->prefix_table("user_table");
$mysql="delete from $user_table where user_id='$user_id'";
$db_object->insert($mysql);
$mysql="update $user_table set admin_id=1 where admin_id='$user_id'";
$db_object->insert($mysql);

$temp_user_table=$this->prefix_table("temp_user_table");
$mysql="delete from $temp_user_table where user_id='$user_id'";
$db_object->insert($mysql);

$unapproved_skill_builder=$this->prefix_table("unapproved_skill_builder");
$mysql="delete from $unapproved_skill_builder where emp_id='$user_id'";
$db_object->insert($mysql);

$user_session=$this->prefix_table("user_session");
$mysql="delete from $user_session where user_id='$user_id'";
$db_object->insert($mysql);


	
}
//---------------------------------------------

//don't delete the third argument .. ask celia for more details

function lang_menu($db,$default,$form_array)
{
	$path = $this->path;
	$filename = $path."templates/langmenu.html";
	
	$file = $this->return_file_content($db,$filename);


	$lang_table = $this->prefix_table("language");
	$desc = "desc $lang_table";
	$res = $db->get_single_column($desc);

	$sp = implode(",",$res);

	$mysql="select $sp from $lang_table";
			
	$lang_rslt=$db->get_rsltset($mysql);
	
	$qry = "select lang_id,lang_$default from $lang_table";
	
	$res = $db->get_rsltset($qry);
	
	$pattern="/<{lang_loopstart(.*?)<{lang_loopend}>/s";
	preg_match($pattern,$file,$arr);
		$match=$arr[0];
		$str="";
		$selected="";
		$l = "lang_".$default;
			for($i=0;$i<count($res);$i++)
			{
				
				$lang_id = $res[$i][0];

				if($lang_id==$default)
					{
						$selected="selected";
					}
				else
					{
						$selected="";
					}				
				$lvar="lang_".$lang_id;
				//$language = $lang_rslt["$lvar"];
				$language = $res[$i][$l];
				$str.=preg_replace("/\<\{(.*?)\}\>/e","$$1",$match);
				
			}
		
	$out=preg_replace($pattern,$str,$file);
	$array=array();
	$out = $this->direct_replace($db_object,$out,$form_array);
	echo ($out);

}

//----------------------------------------------

function return_fields($db_object,$tablename)
{
$mysql = "desc $tablename";
$desc_arr = $db_object->get_single_column($mysql);
$fields = implode(",",$desc_arr);
return $fields;
}


//----------------------------------------------
function return_Keyedarray($arr,$key,$value)
{
	for($i=0;$i<count($arr);$i++)
		{
	$key_val=$arr[$i]["$key"];
	$value_val=$arr[$i]["$value"];
	$new_arr["$key_val"]=$value_val;
		}
	return $new_arr;
}

//--------------------------------------------------------------

/* this function  will implode the fieldname with similar grp_field
please dont use this function because this is only used in the test_question.php

*/

function group_similar($db_list,$grp_field,$fieldname)
	{
	for($i=0;$i<count($db_list);$i++)
		{
		$catname=$db_list[$i][$grp_field];
		$fieldvalue=$db_list[$i][$fieldname];
		$catlist[$catname][]=$fieldvalue;
		if($db_list[$i]["status"]=="r")
		{
					$catlist[$catname]["correct"]=$db_list[$i]["answer"];
		}
	}
/*
print_r($catlist);
	$catname_list=@array_keys($catlist);
	
	

	for($i=0;$i<count($catname_list);$i++)
		{
		$catname=$catname_list[$i];
		$img_arr=$catlist[$catname];
		$joined=@implode("::",$img_arr);
		$new_list[$i][$grp_field]=$catname;
		//$new_list[$i][0]=$catname;
		$new_list[$i][$fieldname]=$joined;
		//$new_list[$i][1]=$joined;
		}
		//print_r($new_list);


echo $fieldname;
for($i=0;$i<count($db_list);$i++)
{
	$catname=$db_list[$i][$grp_field];
	$fieldvalue=$db_list[$i][$fieldname];

echo "cat=$catname";
echo "fel=$fieldvalue";
	
}
*/
$new_list=$catlist;		
	return $new_list;
	}
	
//-----------------------------------------------------------------
function return_location_for_display($db_object,$location_id=null)
{
	$location_table=$this->prefix_table("location_table");
	$field=$this->return_fields($db_object,$location_table);
	if($location_id==null)
	{
		$selqry="select $field from $location_table";
	}
	else
	{
	$selqry="select $field from $location_table  where location_id='$location_id'";
	}
	//echo $selqry;
	$locationset=$db_object->get_rsltset($selqry);
	for($i=0;$i<count($locationset);$i++)
	{
		$loc_id=$locationset[$i]["location_id"];
		$location[$loc_id]=$locationset[$i]["first_level"].",".$locationset[$i]["second_level"].",".$locationset[$i]["third_level"].",".$locationset[$i]["fourth_level"].",".$locationset[$i]["fifth_level"].",".$locationset[$i]["sixth_level"].",".$locationset[$i]["seventh_level"];
	}
	return $location;
}

	
//---------------------------------------------------



function numeric_check($str1)
     {
  if(ereg("[^0-9]",$str1)) 
          {
             return 1;
          }
       }//numeric_check1 ends 
       
//----------------------------------------------------
function take_test($db_object,$form_array,$user_id,$quest_tablename,$test_tablename,$ans_tablename,$skill_percent_tablename)
{
	while(list($kk,$vv)=@each($form_array))
		{

		$$kk=$vv;
		//echo "key is $kk and val is $vv<br><br><br>";	
		}

	$xPath=$common->path;
	$xTemplate=$xPath."../templates/career/take_test.html";
	$returncontent=$this->return_file_content($db_object,$xTemplate);


	

	$quest_table=$this->prefix_table("$quest_tablename");
	$test_table=$this->prefix_table("$test_tablename");
	$ans_table=$this->prefix_table("$ans_tablename");
	$skill_percent = $this->prefix_table("$skill_percent_tablename");
	
	$mysql = "select test_type from $test_table where test_id='$test_id'";

	$testtype_arr = $db_object->get_a_line($mysql);
		
	$test_type = $testtype_arr["test_type"]; 

$values["directreplace"]["fTestname"]=$fTestname;
$values["directreplace"]["test_id"]=$test_id;
$values["directreplace"]["test_type"]=$test_type;
$values["directreplace"]["test_mode"]=$test_mode;

	//$returncontent = preg_replace("/{{(.*?)}}/e","$$1",$returncontent);
$returncontent = $this->direct_replace($db_object,$returncontent,$values);
	
	

	$mysql = "select * from $quest_table where test_id='$test_id' order by q_id "; //$test_id
	$questions_arr = $db_object->get_rsltset($mysql);

	preg_match("/<{quest_loopstart}>(.*?)<{quest_loopend}>/s",$returncontent,$qmatch);
	$newqmatch = $qmatch[1];
	
	$str = "";	

	preg_match("/<{ans_loopstart}>(.*?)<{ans_loopend}>/s",$returncontent,$amatch);
		

	for($i=0;$i<count($questions_arr);$i++)
		{
		$No = $i + 1;
		$newamatch = $amatch[1];
		
		
		
		$str1 = "";
		
		$q_id = $questions_arr[$i]["q_id"];
		$question = $questions_arr[$i]["question"];
		$status = $questions_arr[$i]["status"];
		$skill_id = $questions_arr[$i]["skill_id"];
		
		$mysql = "select * from $ans_table where q_id='$q_id' order by ans_id";
		//echo $mysql;
		$ans_arr = $db_object->get_rsltset($mysql);



			for($j=0;$j<count($ans_arr);$j++)
			{
			
			$ans_id = $ans_arr[$j]["ans_id"];
			$answer = $ans_arr[$j]["answer"];
			
			$answer=str_replace("$","&#36;",$answer);
					
			$ans = preg_replace("/<{(.*?)}>/e","$$1",$newamatch);

			$str1 .= $ans;
			
			}

		$finalmatch = preg_replace("/<{ans_loopstart}>(.*?)<{ans_loopend}>/s",$str1,$newqmatch);
		
		$questions = preg_replace("/<{(.*?)}>/e","$$1",$finalmatch);
	
		$str .= $questions;

		}
	$returncontent = preg_replace("/<{quest_loopstart}>(.*?)<{quest_loopend}>/s",$str,$returncontent);
		


	echo $returncontent;

}

//--------------------FUNCTIO TO RETURN LOCATION-------------------------



function return_location($db_object,$gbl_location)
{


	return $gbl_location;
}
   
//----------------------------------------------------   
       
function showForm($db_object,$common,$form_array,$user_id,$error_msg,$fTest_type=null,$group_id=null)
	{



	$values["directreplace"]=$form_array;
	
		while(list($kk,$vv)=@each($form_array))
		{
		$$kk=$vv;
		
		}
	

	$xTemplate=$xPath."../templates/career/test_builder.html";
	
	$returncontent=$this->return_file_content($db_object,$xTemplate);

if(($mode == 'alert') || ($user_id == 1))
		{
			$returncontent=preg_replace("/<{checkmode_loop(.*?)}>/s","",$returncontent);
		}
		else
		{
			$returncontent =preg_replace("/<{checkmode_loopstart}>(.*?)<{checkmode_loopend}>/s","",$returncontent);
		}
$assign_test_builder = $this->prefix_table('assign_test_builder');

$mysql = "select group_id from $assign_test_builder where user_id='$user_id'";
//echo $mysql;
$group_arr = $db_object->get_single_column($mysql);
if($group_id != '')
{
for($l=0;$l<count($group_arr);$l++)
{
	$check_group = $group_arr[$i];
	//echo "group id is $group_id<br>";
	
	$check = @in_array("$group_id",$group_arr);
			if(!$check)
			{
				$message = $error_msg['cAlertHackertestbuilder'];
				echo $message;
				exit;
			
			}
}
}

	$un_test_table = $this->prefix_table("unapproved_tests");

	$approved_test_table=$this->prefix_table("tests");

		if($user_id==1)
		{

		$mysql = "select test_id,test_name from $approved_test_table";
		$un_arr = $db_object->get_rsltset($mysql);



		}
		else
		{
		
		$mysql = "select test_id,test_name from $un_test_table where user_id='$user_id'";

		$un_arr = $db_object->get_rsltset($mysql);


		}


		for($j=0;$j<count($un_arr);$j++)
			{
			$test_id = $un_arr[$j]["test_id"];

			$new_un_content = $this->conv_2Darray($db_object,$un_arr);
			$returncontent = $this->pulldown_replace($db_object,'<{unapproved_loopstart}>','<{unapproved_loopend}>',$returncontent,$new_un_content,"");
			}



	$tests_table=$this->prefix_table("temp_tests");
	$mysql = "select test_id,test_name from $tests_table where user_id = '$user_id'";


	$temp_arr = $db_object->get_rsltset($mysql);

	
	for($i=0;$i<count($temp_arr);$i++)
	{
	$test_id = $temp_arr[$i]["test_id"];
	
	
	$newcontent	= $this->conv_2Darray($db_object,$temp_arr);

	$returncontent = $this->pulldown_replace($db_object,'<{test_loopstart}>','<{test_loopend}>',$returncontent,$newcontent,"");
	
	
	}
	if($fTest_type=="t")
	{
	
		$values["directreplace"]["tchecked"]="checked";
		$values["directreplace"]["ichecked"]="";
	}
	else if($fTest_type=="i")
	{
		$values["directreplace"]["ichecked"]="checked";
		$values["directreplace"]["tchecked"]="";
	}
	else
	{
		$values["directreplace"]["ichecked"]="";
		$values["directreplace"]["tchecked"]="";
	}

$values["directreplace"]["group_id"]=$group_id;

	$returncontent = $common->direct_replace($db_object,$returncontent,$values);
	
	$returncontent = $this->replace_templatecontent($db_object,$returncontent,$values);


	echo $returncontent;
	}


//------------------------------------------------------------------

function prefix_table($tablename)
{
if($tablename =="user")
{
	$tablename = $prefix.$tablename."_table";
	return $tablename;
}
$prefix=$this->prefix;
$tablename=$prefix.$tablename;
return $tablename;
}
//-----------------------------------------------------------------------
/* this function returns false if user is not an admin or returns the users
who list under him in the user_table */

function is_admin($db_object,$user_id)
{
	$user_table=$this->prefix_table("user_table");
	$selqry="select user_id from $user_table where admin_id='$user_id'";
	$user_set=$db_object->get_single_column($selqry);

	if($user_set[0]=="")
	{

		return false;
	}
	else
	{
		return $user_set;
	}
}


//---------------------------------------------------------------------
/* function will open a existing file and return its contents */

function return_file_content($db_object,$xpath,$user_id=null)
{


$fp=fopen("$xpath","r"); 
$fullcontent=fread($fp,filesize("$xpath"));
fclose($fp);


if($user_id==1)
{

$fullcontent=preg_replace("/<{edit_settings_(.*?)}>/s","",$fullcontent);
$fullcontent =preg_replace("/<{usersettings_start}>(.*?)<{usersettings_end}>/s","",$fullcontent);

}
else
{
$fullcontent=preg_replace("/<{edit_settings_start}>(.*?)<{edit_settings_end}>/s","",$fullcontent);
}
if($user_id!=1)
{
	$fullcontent = preg_replace("/<{usersettings_(.*?)}>/s","",$fullcontent);
}

return $fullcontent;
}

//-----------------------------------------------------------------------------
function hashgen()//to generate a secure unique sessionkey
{
$hash = md5(uniqid(rand(),1));
return $hash;
}//function hashgen()
//----------------------------------------------------------------
/* function will print out the html design for admin panel without replacing any variable*/

function print_html($db_domain,$xpath)
{
$fullcontent=$this->return_file_content($db_domain,$xpath);

echo $fullcontent;

}

//-------------------------------------------------------------------------------
function print_after_replace($db_domain,$xpath,$xArray)
{
while(list($key,$value)=each($xArray))
{
$$key=$value;
//echo "key=$key";
//echo "value=$value";
}


$fullcontent=$this->return_file_content($db_domain,$xpath);

$fullcontent = preg_replace("/{{(.*?)}}/e" , "$$1" , $fullcontent);

echo $fullcontent;


}
//----------------------------------------------------------------------------
function check_session_super($hash,$db_domain)//checks if the site was last accessed before 20min and if so prompts user to relogin
  {
//include("../lang/eng.php");
//prefix
	$user_session = $this->prefix_table("user_session");
	$config = $this->prefix_table("config");
	$cqry = "select min_time from $config where id=1";
	$dres = $db_domain->get_a_line($cqry);

    $qry="Select user_id,timestamp from $user_session where hash='$hash'";

    $line = $db_domain->get_a_line($qry);
    
    $usrid=$line[0];
	$min_logout_time=$dres['min_time'];
	$min=$min_logout_time*60;
	
    if( (time() - $line[1] ) > $min )
    {
     // echo("$session_timed_out");
      return 0;
    }//end if
    else
    {

        $timestmp=time();
  	$qry="Update $user_session set timestamp=$timestmp where hash='$hash'";
        if (! ($result = mysql_query ("$qry")))
        {
          $men = mysql_errno();
          $mem = mysql_error();
          echo ("<h4>$qry  $men $mem</h4>");
          exit;
        }//end inner if
        else
        {
          return $usrid;
        }//end inner else

    }//end else

   
  }//function check_session()
//---------------
function direct_replace($db_object,$read,$values)
{

$default=$_COOKIE["lang"];

if($default=="")
{
$default=1;
}

$path=$this->path;
$http=$this->http_path;

include("$path/lang/$default/lang.php");


if($values['uid']=='1')
	{
		
		$error_msg["cApproval"] = "Approved";		
	}

$keyexist=@array_key_exists("directreplace",$values);


$u_id=$values['uid'];
$user = $value['user'];



if($keyexist)
	{
	$values=$values["directreplace"];
	}


	$values=@array_merge($values,$error_msg);
//	print_r($values);

		while (list($k, $v) =@each ($values))
		 {
		$$k=stripcslashes($v);
		 }
	
 
$replaced = preg_replace("/\{\{(.*?)\}\}/e" , "$$1" , $read);

return $replaced;
}

function direct_replace_single($db_object,$read,$values)
{
	while (list($k,$val) = @each($values))
	{
		$$k	= $val;

	}
	$replaced	= preg_replace("/{{(.*?)}}/e","$$1",$read);
	return $replaced;
}


//------------singleloop_replace form single list box--------
function singleloop_replace($db_object,$loopstart,$loopend,$templatecontent,$listarray,$sel_val)
{

	preg_match("/$loopstart(.*?)$loopend/s",$templatecontent,$matches);
	$match	= $matches[1];
	$str	= "";

//echo $match;
//print_r($listarray);
//echo "sel val=$sel_val";
		while(list($key,$value)=@each($listarray))
		{
			$key1 = $key + 1;
			$selected	="";
			$checked	="";
			if ($key == $sel_val)
			{
				$selected	= "selected";
				$checked	= "checked";
			}
			$str	.= preg_replace("/<{(.*?)}>/e","$$1",$match);
		}
		$templatecontent= preg_replace("/$loopstart(.*?)$loopend/s",$str,$templatecontent);
//echo $templatecontent;
	return $templatecontent;
}

function replace_single_loop($db_object,$read,$arr,$loop,$default)
{
	$pattern="/<{".$loop."_loopstart}>(.*?)<{".$loop."_loopend}>/s";



preg_match($pattern,$read,$out);

		$myvar=$out[0];	
		$selected="";

	$str="";



$keys=@array_keys($arr[0]);

		for($i=0;$i<count($arr);$i++)
		{

		for($j=0;$j<count($keys);$j++)
		{

		$field=$keys[$j];

		

		$$field=$arr[$i][$field];
	

		}		


		//$lang_id=$arr[$i][0];



		//$lang=$arr[$i][1];





		



		if($default==$$field)

		{
		$selected="selected";
		}
		else
		{
		$selected="";
		}



	

		$str.=preg_replace("/<{(.*?)}>/e","$$1",$myvar);

		//echo $str;

		

		}



$read=preg_replace($pattern,$str,$read);





//echo $read;





return $read;

}


//-------------simpleloopprocess-------------------
function simpleloopprocess($db_object,$read , $values)
  {


$repl=preg_replace("/<\{(.*?)_loopstart\}>(.*?)<\{(.*?)_loopend\}>/s","<\{$1_loopstart}>$1loopcontent<\{$1_loopend}>",$read);

preg_match_all("/<\{(.*?)_loopstart\}>(.*?)<\{(.*?)_loopend\}>/s",$read,$out,PREG_SET_ORDER);

$cnt1=count($out);

for($i=0;$i<$cnt1;$i++)
      {
$vararr=array();

$cloop=$out[$i][0];


preg_match("/<\{(.*?)_loopstart\}>/",$cloop,$getname);


$gname=$getname[1]."_loop";

$gname1="<{".$getname[1]."_loopstart}>".$getname[1]."loopcontent<{".$getname[1]."_loopend}>";

//$gname1=$getname[1]."loopcontent";

//echo "<br>$gname1";

if(count($values)>0)
{

$keyexist=array_key_exists($gname,$values);
}


if($keyexist)
   {
$replacedloop="";

while (list($k, $v) = @each ($values["$gname"]))
 {
$vararr[]=$k;
$$k=$v;
 }


$cnt=count($values["$gname"]["$vararr[0]"]);


$myvar=$values["$gname"]["$vararr[0]"];

//print_r($myvar);


$arrvar=@array_keys($myvar);



//print_r($vararr);

//print_r($arrvar);


$flag=0;


  for($k=0;$k<count($vararr);$k++)
     {

//echo "varname=$varname<br>";

       for($l=0;$l<count($arrvar);$l++)
           {
$varname=$arrvar[$l];

$values["$gname"]["$k"]["$varname"]=str_replace("$","&#36;",$values["$gname"]["$k"]["$varname"]);

$$varname=$values["$gname"]["$k"]["$varname"];

/* checks whether option is to be checked or selected */

if($values["loop_selected"]["$gname"]["$varname"]==$$varname)
		{
		$flag=1;
		}
		if($flag==1 && $l==(count($arrvar)-1))
		{
//		echo "<b>enters here with var=$varname val=$cur_val</b><br>";
		$selected="selected";
$checked="checked";
		$flag=0;
		}
		else
		{
		$selected="";
		$checked="";
		}
            }
        
$replacedloop.= preg_replace("/<{(.*?)}>/e" , "$$1" , $cloop);

     }
//echo("<br>replacedloop= $replacedloop");


$repl=preg_replace("/$gname1/",$replacedloop,$repl);

$selected="";
$flag=0;

   }
      }//for loop

return $repl;


  }//fun ends
//-------------replce the tempalte content-------------


function replace_templatecontent($db_object,$read,$values)
    {



$read=$this->simpleloopprocess_direct($read , $values);

$read=$this->simpleloopprocess($db_object,$read , $values);

//$read=$this->simpleloopprocess($read , $values);


$retcontent=$this->direct_replace($db_object,$read,$values);


return $retcontent;



    }




function simpleloopprocess_direct($read , $values)//function to replace non db array values
   {
$repl=preg_replace("/~~(.*?)_directbegin~~(.*?)~~(.*?)_directclose~~/s","~~$1_directbegin~~$1directloopcontent~~$1_directclose~~",$read);
preg_match_all("/~~(.*?)_directbegin~~(.*?)~~(.*?)_directclose~~/s",$read,$out,PREG_SET_ORDER);

$cnt1=count($out);

for($i=0;$i<$cnt1;$i++)
      {
$vararr=array();

$cloop=$out[$i][0];

preg_match("/~~(.*?)_directbegin~~/",$cloop,$getname);

$gname=$getname[1]."_directloop";

$gname1="~~".$getname[1]."_directbegin~~".$getname[1]."directloopcontent~~".$getname[1]."_directclose~~";

if(count($values)>0)
{
$keyexist=array_key_exists($gname,$values);
}

if($keyexist)
   {
$replacedloop="";
while (list($k, $v) = @each ($values["$gname"]))
 {
$vararr[]=$k;
$$k=$v;
 }

$cnt=count($values["$gname"]["$vararr[0]"]);

//echo "cloop=$cloop<br>";


  for($k=0;$k<$cnt;$k++)
     {
        for($l=0;$l<count($vararr);$l++)
           {
$varname=$vararr[$l];
$$varname=$values["$gname"]["$varname"][$k];
            }
$replacedloop.= preg_replace("/~~(.*?)~~/e" , "$$1" , $cloop);
     }

$repl=preg_replace("/$gname1/",$replacedloop,$repl);


   }



      }//for loop



return $repl;




   }













function upload_cv($cv_file,$id,$type,$subdir)//for admin to add images
  {

$a=strcasecmp($type,"application/octet-stream");
$b=strcasecmp($type,"text/html");
$c=strcasecmp($type,"text/plain");
$d=strcasecmp($type,"application/msword");
if($a==0)
  {
  $suf=".csv";
  }
else if($b==0)
  {
  $suf=".html";
  }
else if($c==0)
  {
  $suf=".txt";
  }
else if($d==0)
  {
  $suf=".doc";
  }
$file=$id.$suf;
$dir=$this->path."/uploads";


if($subdir)
{
	$dir=$dir.$subdir;
}
if(($type=="application/octet-stream") || ($type=="text/html") || ($type=="text/plain")|| ($type=="application/msword"))
 {

$file_name="$dir/$id$suf";
move_uploaded_file ("$cv_file" , "$dir/$id$suf");
chmod ($file_name, 0777);   
return($file);
  }
else
  {
//echo("<h3>Error:not possible to load a non txt/html/richtext/msword file</h3>") ;
return 0;
  }

}//fun ends







//---------------------------------------------------------------------------------------------
function check_email($email)

{
if (! (preg_match ("/(@.*@)|(\.\.)|(@\.)|(\.@)|(^\.)/", "$email") || preg_match("/^.+\@(\[?)[a-zA-Z0-9\-\.]+\.([a-zA-Z]{2,3}|[0-9]{1,3})(\]?)$/" , "$email") && $email != ""))
{

return 0;

}
else
{

return 1; // proper one

}
}
//----------------------------------------------------------------------------------------------
function check_url($url)
{
$url=ereg_replace("http://","",$url);
$url=ereg_replace("www\.","",$url);
if(ereg("[0-9a-zA-Z-]",$url))
  {
//echo("url=$url");
  }
else
 {
$r=1;
 }
if($r!=1)
 {
$r=$this->check_count($url);
$furl=$r;
 }

if($r==1)
 {

return $r;
 }

}

//---------------------------
function check_count($str1)
 {
if(ereg("\.",$str1))
 {
//echo("enters here");
$val=explode(".",$str1);
$c=count($val);
//echo("c=$c");
$c1=$c-1;
$len=strlen($val[$c1]);
//echo("len=$len");
$s=$val[$c1];
//echo("s=$s");
   if($len>=2 && $len<=4)
      {
if(ereg("[^a-zA-Z]",$s))
     {
    return 1;
     } 
  else
    {
  return $str1;
    }
      }
   else
    {
   return 1;
    }
 }
else
  {
 return 1;
  }
}//fun ends
//----------------------------------------
function check_for_http($url)
{
if(preg_match("/http:\/\//",$url)) // if url contains http
{
return $url;
}
elseif(preg_match("/https:\/\//",$url)) // if url contains https
{
return $url;
}
else
{
$url="http://".$url;
return $url;
}


}
//======================================================
function pulldown_replace($db_object,$loopstart,$loopstop,$template,$readvalues,$sel_val)
{
	preg_match("/$loopstart(.*?)$loopstop/s",$template,$matches);
	$match	= $matches[1];
	$str	= "";
//print_r($readvalues);
//echo $match;
	if (count($readvalues)>0)
	{
		while (list($key,$value) = @each($readvalues))
		{
			$sel	="";

			if (($key == $sel_val)) //|| ($value == $sel_val)
			{

				$sel	= "selected";
			}
			$str	.= preg_replace("/<{(.*?)}>/e","$$1",$match);
		}

		$template	= preg_replace("/$loopstart(.*?)$loopstop/s",$str,$template);
		

	}
	return $template;	
}
//----- function pulldown_replace ends

//------------------------------------------------------------------

function email_to_admin($db_object)
{

//codings for sending email to the system owner....
	
	$config=$this->prefix_table("config");
	
$mysql="select tbsubject,tbmessage from $config";
$rslt_arr=$db_object->get_a_line($mysql);

//print_r($rslt_arr);

$tbsubject=$rslt_arr["tbsubject"];
$tbmessage=$rslt_arr["tbmessage"];

$user=$this->prefix_table("user");

$subqry2="select username,email from $user where user_id='$user_id'";

$user_name=$db_object->get_a_line($subqry2);

//$to=$user_name["username"]."admin@Pms.com";

$from=$user_name["email"];

$subqry2="select email from $user where user_id='1'";

$sys_email=$db_object->get_a_line($subqry2);

$to=$sys_email["email"];


$values["directreplace"]["username"]=$user_name["username"];
$values["directreplace"]["url"]=$this->http_path."/index.php";
$tbmessage=$this->direct_replace($db_object,$tbmessage,$values);
$sent=$this->send_mail($to,$tbsubject,$tbmessage,$from);

	if($sent)
	{
		
		echo $alert_msg["cMailsent"];
		
	}
	else
	{
		echo $alert_msg["cFailmail"];
	}

}
//------------------------------------------------------------------
function send_mail($to,$subject,$message,$from)
{


/*
$filename="d:/work/pms/mail/$to.txt";
$fp=fopen($filename,"w");
fwrite($fp,$message);
fclose($fp);
*/


//echo "to=$to sub=$subject message=$message from=$from";

//echo "to=$to,from=$from,subject=$subject,message=$message<br>";



/* CODE ADDED ON JUNE 20 to MAKE THE TEXT WRAP */

preg_match("'<[\/\!]*?[^<>]*?>'si",$message,$out);

$myvar=$out[0];

if($myvar!=null) // html mail

{

$headers  = "MIME-Version: 1.0\n";
$headers .= "Content-type: text/html; charset=iso-8859-1\n";
$headers .= "From: $from\n";

}

else // text mail

{
$headers  = "MIME-Version: 1.0\n";
$headers .= "Content-type: text/plain; charset=iso-8859-1\n";
$headers .= "From: $from\n";

$message=@wordwrap($message);

}





$bool=@mail("$to", "$subject", $message,"$headers");

//echo "bool=$bool";


return 1;

}
//---------------------------------------------------------------------	

function write_to_file($db_object,$filename,$content)

{

//echo "filename=$filename";

$fp=fopen("$filename","w");

fwrite($fp,$content);

fclose($fp);



}



//============= Function converts the 2D array(Only 2 X 2 not 3x2 or 2x5) into a 1D array.
//------------- Sets the first column of the given 2D array as key and the second column as the value
//============= Mainly used to send 1D array to pulldown_replace function

function conv_2Darray($db_object,$readarray)
{
	$return_array	= Array();
	$i=0;
	foreach($readarray as $read)
	{
		$return_array[$read[0]]	= $read[1];
	}

	return $return_array;
}//---------- Function conv_2Darray ends
//===========================================================================
function pulldown_replace_multiple($db_object,$loopstart,$loopstop,$template,$readvalues,$sel_val)
{
	preg_match("/$loopstart(.*?)$loopstop/s",$template,$matches);
	$match	= $matches[1];
	$str	= "";
//print_r($readvalues);
//echo $match;

//print_r($sel_val);
	if (count($readvalues)>0)
	{
		while (list($key,$value) = @each($readvalues))
		{
			$sel	="";
			$checked	= '';
//echo $sel_val[$key];			
			if(@in_array($key,$sel_val))
			{
				$sel = "selected";
				$checked = "checked";
			}
//echo $sel;
			$str	.= preg_replace("/<{(.*?)}>/e","$$1",$match);
		}

		$template	= preg_replace("/$loopstart(.*?)$loopstop/s",$str,$template);
		

	}
	return $template;	
}
//----- function pulldown_replace ends


//---------------function  fro page break------------------

function print_pgbreak($db_object,$lnk,$count,$returncontent,$result)
{


$value= ceil($count / $result);

preg_match ("/<{page_loopstart}>(.*?)<{page_loopend}>/s" , $returncontent , $cmtitle);

	$displayresult=$cmtitle[0];


for($x=1;$x<=$value;$x++)
{

$link=$lnk."&fPage=".$x;
$page=$x;


$string3.=preg_replace("/<{(.*?)}>/e","$$1",$displayresult);



$link="";	
}

	$returncontent=preg_replace ("/<{page_loopstart}>(.*?)<{page_loopend}>/s" , $string3 , $returncontent);


return $returncontent;	


}





//---------------------------function for location


function list_category($db_object,$common,$catid,$app,$match_arr)
{
	
static $twodarr;
static $twodcnt = 0;
static $category_array;
static $return_string;

static $no=0;

$category_table=$this->prefix_table("location");
$catrelate_table=$this->prefix_table("location_relate");

$app=$app."&nbsp;--";

if($catid==null)
	{
$catid=0;
$app="";
	}
/*$mysql="select sub_catid from $catrelate_table where main_catid='$catid'";
$below = $db_postnuke->get_single_column($mysql);*/

$mysql="select sub_id,loc_name from location_relate,location where location_relate.loc_id='$catid'
and location_relate.sub_id=location.loc_id order by loc_name";
$below = $db_object->get_rsltset($mysql);
if (count($below) > 0)
    {
for($i=0;$i<count($below);$i++)
       {
$value=$below[$i][0];
$category=$below[$i][1];
//if(@in_array($value,$match_arr))
if($value==$match_arr)
	{
$category="<option selected value=\"$value\">$app$category</option>";
	}
else
	{
$category="<option value=\"$value\">$app$category</option>";
	}
//echo $s;
$return_string.=$category;
$category_array[$catid][$value]=$category;
$this->list_category($db_object,$common,$value,$app,$match_arr);

$str=<<<EOD

EOD;
echo $str;
       }
    }
//   return $category_array;

   return $return_string;

  }


//function ends

//------------------------------------------------------------------
function where_am_i($gbl_files)
{

//print_r($gbl_files);

	
$dir1 = substr(strrchr(getcwd(), "\\"), 1);
//$dir1 = substr(strrchr(getcwd(), "//"), 1);

echo "<table><tr>";
echo "<td class=code>";
echo "<b>You are currently in  </b>";
echo "</td><td class=code>";
$text=strtoupper($dir1);
echo $text;
echo " MODULE ";
echo "</td>";
$filename=$_SERVER['PHP_SELF'];
$filename = substr(strrchr($filename, "/"), 1);

/*
$filename=preg_replace("/_/s"," ",$filename);*/


$fl=split(".php",$filename);
$filenametemp=$fl[0];
$filename1=$gbl_files[$dir1][$filenametemp];
if($filename1=="")
{
	$filename1=$filename;
}

echo "<td class=code>";
echo "<b>and the page is </b>";
echo "</td><td class=code>";
echo strtoupper($filename1);
echo "</td></tr>";
echo "</table>";

}

//-------- Similar to simpleloopprocess
/*
	Values to this function needs to be the same as SLP
	The values to the $sel_arr should be 2D array.
	For ex: If you need to send the values '1','2' for the loop 'some_loop'
	then you need to send it as 
	
		$sel_arr['some_loop']	= array('1','2');
		
		If you need to send only one value to sel_arr even then you need to 
		send it as an array
		
		$sel_arr['some_loop']	= array('a');
		
		The match in the template should be <{selected}> or <{checked}>, to 
		select or check a pariticular value.
		
*/


function multipleloop_replace($db,$template,$xArray,$sel_arr)
{
	$out_count	= count($xArray);

	while (list($outk,$outv) = @each($xArray))
	{

		$outstart	= '<{'.$outk.'start}>';
		$outstop	= '<{'.$outk.'end}>';

		$select_arr	= $sel_arr["$outk"];

		preg_match("/$outstart(.*?)$outstop/s",$template,$mat);
		$mat	= $mat[1];
		
		
		$cnt	= count($outv);
		
		$i=0;
		$str	= '';
		while ($i<$cnt)
		{
			$rec	= $outv[$i];
			
			$arr_keys	= @array_keys($rec);
			$selected	= '';
			$checked	= '';
				
			while (list($k,$v) = @each($arr_keys))
			{
				$temp	= $v;
				$$temp	= $rec["$temp"];

				$temp1	= $$temp;

				if (is_array($select_arr))
				{
					if (@in_array($temp1,$select_arr))
					{

						$selected = 'Selected';
						$checked  = 'Checked';
					}
					
				}
				else
				{
					$fname	= $select_arr;
					$temp_arr	= $sd;
				}


			}
			$str	.= preg_replace("/<{(.*?)}>/e","$$1",$mat);

			while (list($k,$v) = @each($arr_keys))
			{
				$temp	= $v;
				$$temp	= '';
			}			
			
			$i++;
		}
		$template	= preg_replace("/$outstart(.*?)$outstop/s",$str,$template);
	}
	return $template;
}
//------ Function ends
//------------------------------------------------
//function to show usernames

function show_Username($db_object,$returncontent,$loopname)
{
$user_table = $this->prefix_table("user_table");
$mysql = "select username,user_id from $user_table where user_id <> 1";
$user_arr = $db_object->get_rsltset($mysql);

$values[$loopname] = $user_arr;
$returncontent	= $this->multipleloop_replace($db_object,$returncontent,$values,'');
	return $returncontent;
}

//------------------------------------------------
//====== This function is a clone of direct_replace except that it replaces a range

function direct_replace_range($db_object,$read,$xArray,$start,$stop)
{
	preg_match("/$start(.*?)$stop/s",$read,$match);
	$match	= $match[1];
	@reset ($xArray);
	while(list($key,$value)=@each($xArray))
	{
		$$key=$value;
	}
	$content	= preg_replace("/{{(.*?)}}/e","$$1",$match);

	
	$fullcontent = preg_replace("/$start(.*?)$stop/s",$content,$read);
	return $fullcontent;
}

//==================================


}
$post_var1=$_POST;
$get_var1=$_GET;

$adt="";

while(list($key,$value)=each($post_var1))
{
$$key=$value;
$post_var["$key"]=$value;
	$adt.="&$key=$value";

}
while(list($key,$value)=each($get_var1))
{
$$key=$value;
$post_var["$key"]=$value;
	$adt.="&$key=$value";
}





?>