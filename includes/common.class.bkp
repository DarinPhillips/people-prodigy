<?php
/*---------------------------------------------------------------------
-----------------------------------------------------------------------
CLASS :common
AUTHOR:info@chrisrajana.com
UPDATED:Sep 10 2003

DESCRIPTION:
This class handles all the common routines of this project

METHODS:

-----------------------------------------------------------------------
----------------------------------------------------------------------*/

class common extends database
{
	var $username;
	var $password;
	var $adminid;
	var $min_logout_time;
	var $lfvar;
	var $cavar;
	var $pfvar;
	var $covar;

	
function common() // constructor
{				
	$this->username="admin";  // admin username
	$this->password="admin"; // admin password
	//$this-adminid=9999;  
	$this->min_logout_time=20;  // time considered for expiry of session (in minutes)
	$this->prefix="";
	//$this->q_cnt=8;
	$this->pagelimit=
	$this->login_mode="test";

$this->path="d:/work/learning/Pms/";
$this->http_path="http://192.168.0.3/first/PMS";

/*
	$this->path="/var/www/html/Pms/";
	$this->http_path="http://www.cat45.com/Pms";

*/
	//installation_start
	$this->lfvar="25a9ac406aceb47a0c6cade972bc26fa";
	$this->cavar="8ae1016c4044ea668c4db3f57e3cc7f1";
	$this->pfvar="c05f6c233521207f6fe311afef550c3c";
	$this->covar="a74ad8dfacd4f985eb3977517615ce25";
	//installation_end

}

//ALL SKILLS THAT ARE REQUIRED BY EMPLOYEES COMPARED TO THE MODEL AND PLACED IN DIFFERENT
//CELLS ARE FOUND OUT HERE (CAREER MODULE - TECHNICAL)
//---------------------------------------------------------------------------------------
function gaps_at_a_glance_technical($db_object,$user_id,$modelid)
{

	$model_skills 		= $this->prefix_table('model_skills');
	$other_raters_tech 	= $this->prefix_table('other_raters_tech');
	$skill_raters		= $this->prefix_table('skill_raters');
	$skills 		= $this->prefix_table('skills');



	$mysql = "select $model_skills.skill_id as skill_id,
			round(avg(label_id)) as label_got,
			level_chosen as level_required
			from $other_raters_tech,$model_skills 
			where $model_skills.skill_id = $other_raters_tech.skill_id
			and $model_skills.model_id = '$modelid'
			and $other_raters_tech.rated_user = '$user_id'
			group by $other_raters_tech.skill_id";	

	$datareqtech_arr = $db_object->get_rsltset($mysql);

//CREATING THE REQUIRED DATA IN AN ARRAY...

	$newarraytech=array();


		for($i=0;$i<count($datareqtech_arr);$i++)
		{
	
		$label_got = $datareqtech_arr[$i]['label_got'];
		$level_required = $datareqtech_arr[$i]['level_required'];
		$skill_id = $datareqtech_arr[$i]['skill_id'];

		$newarraytech[$level_required][$label_got][]= $skill_id;
	
		}

	$mysql = "select count(*) as cnt_tech from $skill_raters where skill_type = 't'";
	$cnt_arr = $db_object->get_a_line($mysql);
	$cnt_tech = $cnt_arr['cnt_tech'];
	
	 
	$nrows=$cnt_tech;
	$ncolumns=1;

//-----------------------------------------------------------------	

	for($i=$cnt_tech;$i>0;$i--)
	{
		 

	
		for($j=$cnt_tech;$j>0;$j--)
		{
 
			$skilltech_str="";
		 
			for($l=0;$l<count($newarraytech[$nrows][$ncolumns]);$l++)
			{
				
				$skilltech_id_dis = $newarraytech[$nrows][$ncolumns][$l];
				
				$mysql = "select skill_name,skill_id from $skills where skill_id = '$skilltech_id_dis'";
				$skills_arr = $db_object->get_a_line($mysql);
				$skilltech_display = $skills_arr['skill_name'];
				 
			
			
//COLOR DISPLAY START
				
				if($nrows == $cnt_tech && $ncolumns == '1')
				{
					 
					$keyid_tech = 1;
					$percent_fit[$keyid_tech] = $no_of_skills_tech1++;
					 
				}
				elseif($nrows == '1' && $ncolumns == $cnt_tech)
				{
				 
					$keyid_tech = 5;
					$percent_fit[$keyid_tech] =  $no_of_skills_tech5++;
				}
				elseif($nrows == $ncolumns)
				{
				 
					$keyid_tech = 3;
					$percent_fit[$keyid_tech] =  $no_of_skills_tech3++; 
				}
				elseif($nrows < $cnt_tech && $ncolumns >= $nrows)
				{
					 
					$keyid_tech = 4;
					$percent_fit[$keyid_tech] =  $no_of_skills_tech4++;
				}
				else //if($nrows == $cnt_tech && $ncolumns == $cnt_tech)
				{
				 
					$keyid_tech = 2;
					
					$percent_fit[$keyid_tech] =  $no_of_skills_tech2++;
					 
				}
				$key_array_tech[$keyid_tech][] = $skilltech_id_dis;
		

			 
			}
		
			if(count($newarraytech[$nrows][$ncolumns]) < 1)
			{
								
			 
			}
		  
		 
			if($j == 1)  
			{
			
			 

				
//if it is the end of columns then add the last column and move on to the next row ...
		 
				 $ncolumns++;
				
				 
				$nrows--;
				$ncolumns=1;
				
			}
			else
			{

		 	 
				
				 
				$ncolumns++;
			}
			

		}
	}
return $key_array_tech;
	


}

//ALL SKILLS THAT ARE REQUIRED BY EMPLOYEES COMPARED TO THE MODEL AND PLACED IN DIFFERENT
//CELLS ARE FOUND OUT HERE (CAREER MODULE - INTERPERSONAL)
//---------------------------------------------------------------------------------------
function gaps_at_a_glance($db_object,$user_id,$modelid)
{
	$skill_raters 		= $this->prefix_table('skill_raters');
	$model_skills 		= $this->prefix_table('model_skills');
	$skills 		= $this->prefix_table('skills');
	$textqsort_rating 	= $this->prefix_table('textqsort_rating');
	$rater_label_relate 	= $this->prefix_table('rater_label_relate');
	//$model_name_table	= $this->prefix_table('model_name_table');
	//$posmodel_colors 	= $this->prefix_table('posmodel_colors');
	$user_table 		= $this->prefix_table('user_table');
	
	$mysql = "select $model_skills.skill_id,
		round(avg(rater_label_no)) as label_got,
		level_chosen as level_required
		from $model_skills,$textqsort_rating 
		where $model_skills.skill_id = $textqsort_rating.skill_id
		and $model_skills.model_id = '$modelid'
		and $textqsort_rating.rated_user = '$user_id'
		and $textqsort_rating.rater_type = 'i'
		group by $textqsort_rating.skill_id";
		
	$datareq_arr = $db_object->get_rsltset($mysql);	

	$newarray=array();


	for($i=0;$i<count($datareq_arr);$i++)
	{

	$label_got = $datareq_arr[$i]['label_got'];
	$level_required = $datareq_arr[$i]['level_required'];
	$skill_id = $datareq_arr[$i]['skill_id'];

	$newarray[$level_required][$label_got][]= $skill_id;

	}


	$mysql = "select count(*) as cnt from $skill_raters where skill_type = 'i'";
	$cnt_arr = $db_object->get_a_line($mysql);
	$cnt = $cnt_arr['cnt'];

	$nrows=$cnt;
	$ncolumns=1;

	for($i=$cnt;$i>0;$i--)
	{ 
	 
		for($j=$cnt;$j>0;$j--)
		{
 
			$skill_str="";
			$specific_color = '';

			for($l=0;$l<count($newarray[$nrows][$ncolumns]);$l++)
			{
			
				$skill_id_dis = $newarray[$nrows][$ncolumns][$l];
				$mysql = "select skill_name,skill_id from $skills where skill_id = '$skill_id_dis'";
				$skills_arr = $db_object->get_a_line($mysql);
				$skill_display = $skills_arr['skill_name'];
				
			

				if($nrows == $cnt && $ncolumns == '1')
				{
					
					
					$keyid = 1;
					$percent_fit_inter[$keyid] = $no_of_skills_inter1++;
					
					 
				}
				
				elseif($nrows == '1' && $ncolumns == $cnt)
				{
					//echo "row $nrows and col $ncolumns <br>";
					
					$keyid = 5;
					$percent_fit_inter[$keyid] = $no_of_skills_inter5++; 
				}
				elseif($nrows == $ncolumns)
				{
					
					$keyid = 3;
					$percent_fit_inter[$keyid] = $no_of_skills_inter3++;
				}
				elseif($nrows < $cnt && $ncolumns >= $nrows)
				{
					
					$keyid = 4;
					$percent_fit_inter[$keyid] = $no_of_skills_inter4++;
				}
				else //if($nrows == 1 && $ncolumns == 1)
				{
					
					$keyid = 2;
					$percent_fit_inter[$keyid] = $no_of_skills_inter2++; 
				}
 
				$key_array[$keyid][] = $skill_id_dis;


 
			}
			 
			if($j == 1) //$cnt-1
			{
				
//if it is the end of columns then add the last column and move on to the next row ...
		 	 
			$nrows--;
			$ncolumns=1;
				
			}
			else
			{
				 
			$ncolumns++;
			
			}
			

		}


	}
return $key_array;
 
}











//RETURNS THE USERS WHO HAVE THE POSITION IN THEIR LEARNING PLAN (CAREER MODLULE DEPTH CHART)...
//-----------------------------------------------------------------
function users_with_pos_in_learningplan($db_object,$position_id)
{
	$position 		= $this->prefix_table('position');
	$approved_devbuilder	= $this->prefix_table('approved_devbuilder');

//DETERMINING THE NAME OF THE POSITION LOOKING FOR...
	$mysql = "select position_name from $position where pos_id = '$position_id'";
	$posname_required_arr = $db_object->get_a_line($mysql);

	$posname_required = $posname_required_arr['position_name'];


	$mysql 			= "select title,user_id from approved_devbuilder where basic_id=4 and interbasic_id = 12";
	$positionname_arr 	= $db_object->get_rsltset($mysql);


	for($i=0;$i<count($positionname_arr);$i++)
	{
		$pos_name = $positionname_arr[$i]['title'];
		$userid = $positionname_arr[$i]['user_id'];
	
		if(trim($pos_name) == $posname_required)
		{
			$users_with_position_inlearnplan[] = $userid;
		}	

	}


	return $users_with_position_inlearnplan;

}

//THIS FUNCTION DETERMINES THE MODELS THAT A PARTICULAR PERSON IS CAPABLE OF VIEWING(CAREER MODULE)
//-------------------------------------------------------------------------------------------------
function viewable_models($db_object,$user_id)
{
	$user_table 	= $this->prefix_table('user_table');
	$position	= $this->prefix_table('position');
	$model_view_1	= $this->prefix_table('model_view_1');
	$model_view_2	= $this->prefix_table('model_view_2');
	$model_table	= $this->prefix_table('model_table');

	if($user_id != '' && $user_id != 0)
	{
//DETERMINE THE LEVEL OF THE CURRENT USER
		$mysql = "select level_no from $user_table,$position 
				where $user_table.position = $position.pos_id
				and $user_table.user_id = '$user_id'";
		$lev_arr = $db_object->get_a_line($mysql);
		$cur_level = $lev_arr['level_no'];
	
//DETERMINE THE MODELS WHICH THE LEVEL OF THE PERSON IS CAPABLE OF VIEWING...
		$mysql = "select model_id from $model_view_1 where levels_to_view = '$cur_level'";
		$model_view1_arr = $db_object->get_single_column($mysql);
	

		$check_boss 	= $this->is_boss($db_object,$user_id);
		$check_admin 	= $this->is_admin($db_object,$user_id);

//MODELS BOSSES CAN VIEW...	
		if($check_boss == 1)
			{
				$mysql = "select model_id from $model_view_2 where boss= 'yes'";
				$model_viewboss_arr = $db_object->get_single_column($mysql);
		
			}

//MODELS ADMINS CAN VIEW...	
		if($check_admin == 1)
			{
				$mysql = "select model_id from $model_view_2 where admins = 'yes'";
				$model_viewadmin_arr = $db_object->get_single_column($mysql);

			}

//MODELS ALL CAN VIEW...	
		$mysql = "select model_id from $model_view_2 where all1 = 'yes'";
		$model_viewall_arr = $db_object->get_single_column($mysql);

//MODELS SELF CAN ONLY VIEW...	
		$mysql = "select model_id from $model_view_2 where me = 'yes'";
		$checkwithself = $db_object->get_single_column($mysql);
		$checkself = @implode("','",$checkwithself);
		if($checkself != '')
		{
		$mysql = "select model_id from $model_table where model_id in ('$checkself') and user_id = '$user_id'";
		$model_viewself_arr = $db_object->get_single_column($mysql);
		}
		else
		{
		$model_viewself_arr = '';
		}
	/*------------------------
	print_r($model_view1_arr);
	echo "<br>";
	print_r($model_viewboss_arr);
	echo "<br>";
	print_r($model_viewadmin_arr);
	echo "<br>";
	print_r($model_viewall_arr);
	echo "<br>";
	print_r($model_viewself_arr);
	--------------------------*/

	$all_viewable_models_junk = @array_merge($model_view1_arr,$model_viewboss_arr,$model_viewadmin_arr,$model_viewall_arr,$model_viewself_arr);
	$all_viewable_models_unordered = @array_unique($all_viewable_models_junk);
	while(list($kk,$vv) = @each($all_viewable_models_unordered))
		{
			$all_viewable_models[] = $vv;
	
		}

	return $all_viewable_models;
	}
	
}

//-------------------------------------

function get_chain_above($position,$db_object,$twodarr)
  {
    static $twodarr = -1;
    //static $twodcnt = 0;	
	$position_table = $this->prefix_table("position");
		
		$qry1 = "select boss_no from $position_table where pos_id='$position'";
		//echo "qry1 = $qry1<br><br><br>";
		$posres = $db_object->get_single_column($qry1);  
		//print_r($posres);
		//echo "<br><br>";
		if (count($posres) > 0)
		{
			
		       foreach ($posres as $user_id)
		       {
			
			$id[0]=$user_id;
			$twodarr = array_merge ($twodarr,$id);
			$this->get_chain_above($user_id,$db_object,$twodarr);
		       }
		}
		    return $twodarr;
  }//function ens

//---------------------This function returns whether teh given user is a boss or not

//-------------split the hexdecimal value
function split_color($db_object,$color)
{
		$im_ccol = explode("#",$color);
		$colors = array();
		$c_col = $im_ccol[1];
		$colors[] = substr($c_col,0,2);
		$colors[] = substr($c_col,2,2);
		$colors[] = substr($c_col,4,2);
		return $colors;
	
}		
//-------------------


function is_boss($db_object,$user_id)
{
$position_table=$this->prefix_table("position");
$user_table=$this->prefix_table("user_table");
$selqry="select position from $user_table where user_id='$user_id'";
$user_position=$db_object->get_a_line($selqry);
$temp_position=$user_position["position"];



	if(($temp_position != 0) && ($temp_position != ""))
	{

	$selqry="select pos_id from $position_table where boss_no='$temp_position'";
	$exists=$db_object->get_a_line($selqry);
	if($exists["pos_id"]!="")
		{
		return true;
		}
	else
		{
		return false;
		}
	}

return false;

}


//---------------------------------------------------------------------

function get_chain_below($position,$db_object,$twodarr)
	{

		//$twodarr  = array();
		static $twodarr=-1;//
					
		$position_table = $this->prefix_table("position");
		
		$qry1 = "select pos_id from $position_table where boss_no='$position'";
		$posres = $db_object->get_single_column($qry1);  								
			if (count($posres) > 0)
			{		
			       foreach($posres as $user_id)
			       {	
					
					
					$id[0]=$user_id;
					$twodarr = array_merge ($twodarr,$id);
					$this->get_chain_below($user_id,$db_object,$twodarr);				
			      }						
			}
		
			return $twodarr;
		
		
	}//function ends



//----------------------------------------
function immediate_boss($db_object,$user_id)
{
	$user_table = $this->prefix_table("user_table");
	$position_table = $this->prefix_table("position");

	$userqry = "select position from $user_table where user_id='$user_id'";
	$userres = $db_object->get_a_line($userqry);
	$pos = $userres['position'];

	$posqry = "select boss_no from $position_table where pos_id='$pos'";
	$posres = $db_object->get_a_line($posqry);
	$position  = $posres['boss_no'];

	$userqry1 = "select user_id from $user_table where position = '$position'";
	$userres1  = $db_object->get_a_line($userqry1);
	$boss_id = $userres1['user_id'];

	return $boss_id;
	
}
///----------------------
function is_module_purchased($db_object,$root_path,$filecontent,$module)
	{
		
	$handle=opendir($root_path);	
	$lfvar=$this->lfvar;
	$cavar=$this->cavar;
	$pfvar=$this->pfvar;
	$covar=$this->covar;
		
	$our_collection=array($lfvar,$cavar,$fpvar,$covar);
	
	//$our_collection=array($lfvar);
		
	$flag=0;

	$f_array=array();

	
	while (false !== ($file = readdir($handle))) 
		{ 

		$full_path=$root_path.$file;

			if(is_dir($full_path))
			{	
				$f_array[] = md5($file);

			}

		}



			if(in_array($module,$f_array))
				{
					$pattern="/<{".$module."_(.*?)}>/is";
					$filecontent=preg_replace($pattern,"",$filecontent);					
				}
			else
				{
				$pattern="/<{".$module."_start(.*?)<{".$module."_end}>/is";
				$filecontent=preg_replace($pattern,"",$filecontent);					
				}
		/*
		if($flag==1)
		{
			$pattern="/<!--space_start/s";
			$pattern1="/space_end-->/s";
			$filecontent =preg_replace($pattern,"",$filecontent);
			$filecontent =preg_replace($pattern1,"",$filecontent);
		}
		else
		{
					
			$pattern="/<!--space_start(.*?)space_end-->/s"	;
			$filecontent = preg_replace($pattern,"",$filecontent);
		}

		*/
		
		closedir($handle); 	
	return $filecontent;		
	}
//-----------------------
function is_module_purchased_check($db_object,$root_path,$module)
	{
		
	$handle=opendir($root_path);	
	$lfvar=$this->lfvar;
	$cavar=$this->cavar;
	$pfvar=$this->pfvar;
	$covar=$this->covar;
		
	$our_collection=array($lfvar,$cavar,$fpvar,$covar);
	
	//$our_collection=array($lfvar);
		
	$flag=0;

	$f_array=array();

	
	while (false !== ($file = readdir($handle))) 
		{ 

		$full_path=$root_path.$file;

			if(is_dir($full_path))
			{	
				$f_array[] = md5($file);

			}

		}
		//return($f_array);
		if(in_array($module,$f_array))
				{
					return(1);				
				}
			else
				{
					return(0);
				}
	}
	//CHANGE ADMIN
	
	function change_admin($db_object,$employee_id,$admin_id)
	{
		$admins=$this->prefix_table("admins");
		
		$user_table=$this->prefix_table("user_table");
		
		if($admin_id!="")
		{
			$ins_qry="update $user_table set admin_id='$admin_id' where user_id='$employee_id'";
			
			$db_object->insert($ins_qry);
			
		}
		else
		{
			$ins_qry="update $user_table set admin_id='1' where user_id='$employee_id'";
			
			$db_object->insert($ins_qry);
		}
	}
//view dashboard
function view_dashboard($db_object,$user_id,$pattern,$replace,$file)
		{
			$user_table  = $this->prefix_table("user_table");
			$position_table = $this->prefix_table("position");

			if($user_id!=1)
			{
				$selqry="select username,user_id from $user_table where admin_id='$user_id'";
			}
			else
			{
				$selqry="select $user_table.username,$user_table.user_id from $user_table,$position_table where $user_table.position=$position_table.pos_id and ($user_table.position<>NULL or $user_table.position<>0) and $user_table.user_id!=1   order by $position_table.level_no desc";
			}
			$userset=$db_object->get_rsltset($selqry);
			

			if($userset[0]["user_id"]!="")
			{	for($i=0;$i<count($userset);$i++)
				{
					$temp_id=$userset[$i]["user_id"];
					$userset[$i]["username"]=$this->name_display($db_object,$temp_id);
				}		
				$userset=$this->return_Keyedarray($userset,"user_id","username");		
				$replaced=$this->singleloop_replace($db_object,"user_loopstart","user_loopend",$replace,$userset,$selqrr);
				
			}
			else
			{
				$replaced=preg_replace($pattern,"",$replace);
			}
			$file = preg_replace($pattern,$replaced,$file);
			return $file;		
		}


//--------------------
//if the user_id belongs to a boss,it'll returns all the users id who are under that boss.
//same way for admins and for both
		
function employees_under_admin_boss($db_object,$user_id)
	{
		$user_table=$this->prefix_table("user_table");
	
		$qry="select position from $user_table where user_id='$user_id'";
	
		$res=$db_object->get_a_line($qry);
	
		$pos=$res[position];
	
		$user_pos_below=$this->get_chain_below($pos,$db_object,$twodarr);
	
		$user_id_below=$this->get_user_id($db_object,$user_pos_below);
	
		for($i=0;$i<count($user_id_below);$i++)
		{
			$id[$i]=$user_id_below[$i][0];
		
		}

		$sql="select user_id from $user_table where admin_id='$user_id'";
	
		$sql_res=$db_object->get_single_column($sql);
	
		$id=@array_merge($id,$sql_res);
	
		return($id);
	}

//-----------deleting the file
function delete_files($root_path,$base_path)
	{
		
	if ($dir = @opendir("$root_path"))  // get the text file names
	 {
		
	  while (($file = readdir($dir)) !== false)
		 {
			
			
			

			if(is_dir($file))
				{
				$var="$root_path/$file";		
				if($file!="." and $file!="..")
				{				
					$this->delete_files($var,$base_path);
				}								
				}
				else
				{					
					if($root_path=$base_path)
					{
					 $file_array[]=$file;
					}

				}
			
		  
		 }  
	  closedir($dir);

			
		for($i=0;$i<count($file_array);$i++)
			{
			$me=$file_array[$i];
			@unlink("$root_path/$me");
			}
			if($root_path=$base_path)
			{
			@rmdir($root_path);
			}

			


	
		
	}



	}

//---------------
//------------Retriving user id-----------------------------
function get_user_id($db_object,$position)
{


	$del_arr=array('0');	
	$diff_arr=@array_diff($position,$del_arr);	
	$position=$diff_arr;

	if($position != -1)
	{
	$user_table = $this->prefix_table("user_table");
	$split = @implode("','",$position);	
	$retuser = "select user_id,username,email,office_phone from $user_table where position in ('$split') and user_type<>'external'";
	$retres  = $db_object->get_rsltset($retuser);	

	return $retres;
	}

}
//-----------------------------------------

//-----------Name Display---------gives the name of the users when the userid is given -----------

function name_display($db_object,$user_id)
{
	$fieldtable  = $this->prefix_table("name_fields");
	$usertable = $this->prefix_table("user_table");
		//field table
		$fqry = "select field_name from $fieldtable where status='YES' order by name_id";
		$fres = $db_object->get_single_column($fqry);
		$spt = @implode(",",$fres);
		$flg=0;
		if($spt=="")
		{
			$spt="username";
			$flg = 1;
		}
	//user tabel
		$ures="";
		$uqry = "select $spt from $usertable where user_id='$user_id'";
		$ures = $db_object->get_a_line($uqry);
		$ustring=@implode("",$ures);
		
		if($ustring==NULL)
		{

			$nqry = "select username from $usertable where user_id='$user_id'";
			$nres = $db_object->get_a_line($nqry);
			$name = $nres['username'];			
			return $name;
		}
		if($flg=='1')
		{
			$name = $ures['username'];
		}
		for($i=0;$i<count($fres);$i++)
		{
			$name .= $ures[$i]." ";
		}			
	return $name;
}
//-----------------------------------------

//No of Answers per question...

function view_plan($db_object,$user_id,$default,$temp_name,$cat_table,$met_table,$lang_table,$perform_table)
		{

			$setting = $this->prefix_table("$perform_table");
			$qry = "select category,metrics from $setting";
			$res = $db_object->get_a_line($qry);
			$cat  = $res['category'];
			$met = $res['metrics'];			
			$path = $this->path;
			$path  = $path."templates/performance/".$temp_name;
			$file = $this->return_file_content($db_object,$path);
			$uid["uid"]= "$user_id";
			$file = $this->direct_replace($db_object,$file,$uid);
			
			$tempcat = $this->prefix_table("$cat_table");
				$disqry = "select count(user_id) from $tempcat where user_id='$user_id'";

				$disres = $db_object->get_single_column($disqry);
				$present = $disres[0];

			$fl = 0;
		//Change the user_id to main admin if the present value=0
			if($present=='0')
			{
				$user_id='1';
				$fl = 1;
			}

			$metrics = $this->prefix_table("$met_table");
			$language = $this->prefix_table("$lang_table");
			
			//language
			$desc = "desc $language";
			$des = $db_object->get_single_column($desc);
			$spl = implode(",",$des);
			$lg  = "select $spl from $language";
			$rslt = $db_object->get_rsltset($lg);

	
			$lang = "select $spl from $language where lang_id='$default'";
			$lres = $db_object->get_a_line($lang);
			
			$no = "select lang_id from $language";
			$lno = $db_object->get_single_column($no);
			//----------
			$desc = "desc $tempcat";
			$des = $db_object->get_single_column($desc);
			$sp = implode(",",$des);		

		
			$qry = "select $sp from $tempcat where user_id='$user_id' order by cat_id";

			$tcat = $db_object->get_rsltset($qry);
			
			$pattern="/<{category_loopstart}>(.*?)<{category_loopend}>/s";
			preg_match($pattern,$file,$arr);
			$match=$arr[0];
			$str="";
			$count = 0;
			
			$pattern1="/<{metrics_loopstart}>(.*?)<{metrics_loopend}>/s";
			preg_match($pattern1,$match,$arr1);
			$inc = 0;
			
			$ct = count($lno);
			$dy=0;
			$c= 0;
			$lg = "lang_".$default;



			for($l=0;$l<count($lno);$l++)
			{
				$max = "select max(met_id) from $metrics";
			$res = $db_object->get_single_column($max);
			$maxid = $res[0];


			$maxc = "select max(cat_id) from $tempcat";
			$res = $db_object->get_single_column($maxc);
			$maxcid = $res[0];

				$count=0;
				$lang_id = $rslt[$l]['lang_id'];
				$lvar="lang_".$lang_id;
				//$language = $lres["$lvar"];
				$language = $rslt[$l][$lg];
			for($i=0;$i<$cat;$i++)
			{
				$match1=$arr1[0];
				$new = "";
				$str1 = "";
				$ct = 0;
				$count =  $count + 1;

				if($tcat[$i][cat_id]!="")
				{
					
					$c = $tcat[$i][cat_id];
					$qry = "select metrics_$lang_id,cat_id,met_id from $metrics where user_id='$user_id' and cat_id='$c' order by met_id limit 0,$met";			
					$tmet = $db_object->get_rsltset($qry);					
					if($fl=='1')
					{
						$maxcid = $maxcid + 1;
						$c = $maxcid;
						$new = "new";
						
					}

				}
				else 
				{
					$maxcid = $maxcid + 1;
					$c = $maxcid;
					$new = "new";
					$tmet=array();	
				}
								
				for($j=0;$j<$met;$j++)
				{
					$ct = $j+1;
					$m = $tmet[$j][cat_id];
					//echo "c=$c : m=$m<br>";
					//if($c==$m)
					{
						$mval = $tmet[$j][0];
					}
					//else
					{
						
					}
					
					if($tmet[$j]['met_id']!="")
					{
						$me = $tmet[$j]['met_id'];
						if($fl=='1')
						{
							$maxid = $maxid + 1;
							$me = $j+1;
							$mnew = "new";
						}
					}
					else
					{
						
						$maxid = $maxid + 1;
						$me = $j+1;
						$mnew = "new";
						
					}



					$str1.=preg_replace("/\<\{(.*?)\}\>/e","$$1",$match1);
					$inc = $inc  + 1;
					$mnew="";
					$mval="";
				}
				$temp	= preg_replace($pattern1,$str1,$match);
				$catg = "category_"."$lang_id";
				$cval = $tcat[$i][$catg];
				$str.=preg_replace("/\<\{(.*?)\}\>/e","$$1",$temp);
				
			}

		}	
			$file=preg_replace($pattern,$str,$file);
		
			echo $file;
		}//end view

//------------------------Fullfilled year to date--------------------------------------------------
function fulfilled($db_object,$user_id,$sl_id,$committed,$accomplish,$checkcumulative)
	{
			//table declaration
		$app_sel_objective = $this->prefix_table("approved_selected_objective");
		$user_table = $this->prefix_table("user_table");
		$approved_feedback = $this->prefix_table("approved_feedback");
		$config_table = $this->prefix_table("config");
		$rating_table = $this->prefix_table("rating");
		$performance_feedback = $this->prefix_table("performance_feedback");
		$approved_affected = $this->prefix_table("approved_affected");
		$position_table = $this->prefix_table("position");
		$dateqry = "select user_id,from_date,to_date,frequency from $approved_affected
		where sl_id='$sl_id' order by aff_id";
		$dateres = $db_object->get_rsltset($dateqry);

		//date calculation				
			$minqry = "select min(from_date) as min,max(to_date) as max from $approved_affected
			 where sl_id='$sl_id'";
			$minres = $db_object->get_rsltset($minqry);
		//Day Since Start Date
			$mindate = $minres[0]['min'];
			$min = @explode("-",$mindate);			
			$month = date("m");
			$date  = date("d");
			$year  = date("Y");
			$tdate = mktime(0,0,0,$month,$date,$year);
			$mdate = mktime(0,0,0,$min[1],$min[2],$min[0]);
			$datediff = $tdate - $mdate;
			$daysincestart=(($datediff/60)/60)/24;

			//echo "days = $daysincestart<br>";
		//Total no of Days
			$maxdate = $minres[0]['max'];
			$mx = @explode("-",$maxdate);
			$mxdate = mktime(0,0,0,$mx[1],$mx[2],$mx[0]);
			$tot = $mxdate - $mdate;
			$totaldays=(($tot/60)/60)/24;
			//echo"min = $mindate<br>";
			//echo"max = $maxdate<br>";
			//echo "total = $totaldays<br>";			
			$noofclasscomplete = $accomplish;
			$totnoofclass = $committed;			
			
			$checkcumulative=1;
			
			if($checkcumulative=='2')
			{
									
				$fulfilled = @($noofclasscomplete/$totnoofclass) * @($daysincestart/$totaldays);
				//echo "accom =$noofclasscomplete : comm = $totnoofclass: start=$daysincestart : totday=$totaldays <br>";
				$fulfilled = $fulfilled * 100;
				$fulfilled = sprintf("%01.2f",$fulfilled);
				return $fulfilled;
			}
			else
			{
				$fulfilled = @($noofclasscomplete/$totnoofclass) * 100;
				$fulfilled = sprintf("%01.2f",$fulfilled);
				return $fulfilled;		
			}
	}//end fullfill

function get_fullfilled($db_object,$o_id,$user_id,$dates)
{
		$app_sel_objective = $this->prefix_table("approved_selected_objective");
		$user_table = $this->prefix_table("user_table");
		$approved_feedback = $this->prefix_table("approved_feedback");
		$config_table = $this->prefix_table("config");
		$rating_table = $this->prefix_table("rating");
		$performance_feedback = $this->prefix_table("performance_feedback");
		$approved_affected = $this->prefix_table("approved_affected");
		$position_table = $this->prefix_table("position");
		$approveduser_objective = $this ->prefix_table("approveduser_objective");

			$oqry = "select met_id from $approveduser_objective where o_id='$o_id' and 
				user_id='$user_id'";
				
			$ores = $db_object->get_a_line($oqry);
			$met_id = $ores['met_id'];
			$mqry = "select o_id from $approveduser_objective where met_id='$met_id' and 
				user_id='$user_id'";
			$mres = $db_object->get_single_column($mqry);
			$aver  = count($mres);
			$oid = @implode("','",$mres);

		//oid - diff o_id with same metrics		
		$Fselobj = "select sl_id,o_id,priority,committed_no,percent,date_format(approved_date,'%Y-%m-%d') as appdate
				 from $app_sel_objective where o_id in ('$oid') and user_id='$user_id' $dates order by sl_id";								
				$Fselres = $db_object->get_rsltset($Fselobj);
		$Ffulfilled = array();
		$Cfulfill = array();
		$Ccommit =array();
		$Caccomplish = array();
		$FAll_date = array();
		for($q=0;$q<count($Fselres);$q++)
			{			
				$Faccomplish="";						
				$Fcommit = $Fselres[$q]['committed_no'];						
				$Fprior = $Fselres[$q]['priority'];
				$Fsl_id = $Fselres[$q]['sl_id'];
				$Fo_id = $Fselres[$q]['o_id'];
				$Fcheckcumulative = $Fselres[$q]['percent'];
				$FAll_date[] = $Fselres[$q]['appdate'];
			//get the delivered(Accomplished) Value;
				$Fdeliqry = "select idelivered,r_id,fd_id,user_id,accept_date from $approved_feedback where
					 user_id='$user_id' and o_id='$Fo_id' and status='2'";
				$Fdelires = $db_object->get_a_line($Fdeliqry);
				$Faccomplish = $Fdelires['idelivered'];					
			//calculation for Fulfilled Year-To-Date	
				$Ffulfilled[]  = $this->fulfilled($db_object,$user_id,$Fsl_id,$Fcommit,$Faccomplish,$Fcheckcumulative);						
				$full = $this->fulfilled($db_object,$user_id,$Fsl_id,$Fcommit,$Faccomplish,$Fcheckcumulative);
				$Cfull = $Cfull +$full ;				
				$Ccom = $Ccom + $Fcommit;
				$Caccom = $Caccom  + $Faccomplish;								
			}
			$Cfull = @($Cfull/count($Fselres));
			$Ccommit = $Ccom;
			$Caccomplish = $Caccom;
			$Cfulfill = $Cfull;

			
			$return_array['Ffullfilled'] = $Ffulfilled;
			$return_array['Cfulfill'] = $Cfulfill;
			$return_array['Ccommit'] = $Ccommit;
			$return_array['Caccomplish'] = $Caccomplish;
			$return_array['Cfulfill'] = $Cfulfill;
			$return_array['Call_date'] = $FAll_date;
			return $return_array;
	
}
//end 





//---------------This funciton is for personal  use of the page Employee Upload

function display_panel($db_object,$error_msg)
   {
	$path=$this->path;
	$xFile=$path."templates/performance/import_employee_details.html";
	$xTemplate=$this->return_file_content($db_object,$xFile);

//----------------------Performance Spreed sheet Upload--------
	
	 $user_table=$this->prefix_table("user_table");	
	 $name_fields=$this->prefix_table("name_fields");
	 $rslqry="select name_id,field_name from $name_fields where status='YES'";
	 $resultset=$db_object->get_rsltset($rslqry);

	$dqry="desc $user_table";
	$drslt=$db_object->get_single_column($dqry);




	 $unwqry="select field_name from $name_fields where status='NO'";
	 $unwantedrslt=$db_object->get_single_column($unwqry);


	$position=$this->prefix_table("position");
	$location=$this->prefix_table("location");
	$access_rights=$this->prefix_table("access_rights");
	$newarr=array($position,$location,$access_rights);

	$unwant2=array("0"=>"reg_date","1"=>"status",2=>"added_by");
	$unwantedrslt=array_merge($unwantedrslt,$unwant2);
	//print_r($unwant2);
	//print_r($unwantedrslt);
//	exit;




	 $resultset=array_diff($drslt,$unwantedrslt);
	$resultset=array_merge($resultset,$newarr);

	 

	 for($i=1;$i<count($resultset);$i++)
	 {
	 	$id=$i+1;
	 	if($resultset[$i]!="")
	 	{
	 	$result[$id]=$resultset[$i];
	 	}
	 }

	$no=count($result);
	 preg_match("/<{column_loopstart}>(.*?)<{column_loopend}>/s",$xTemplate,$match);
	 $replace=$match[1];
	 $loopstart="<{inner_loopstart}>";
	 $loopend="<{inner_loopend}>";
	 $bit="</td></tr>";
	 
	for($i=1;$i<=$no;$i++)
	{
		$id=$i+1;
		$replaced.=$this->singleloop_replace($db_object,$loopstart,$loopend,$replace,$result,$sel);
		$replaced=preg_replace("/<{id}>/s",$id,$replaced);
		if($i%4==0)
		{
			$replaced.=$bit;
		}
	}

	$xTemplate=preg_replace("/<{column_loopstart}>(.*?)<{column_loopend}>/s",$replaced,$xTemplate);

	$xTemplate=$this->direct_replace($db_object,$xTemplate,$vals);
	echo $xTemplate;
   }



   function check_confirm($this,$db_object,$form_array,$error_msg)
   {
   	$g=0;

	while(list($key,$value)=each($form_array))
	{
		$$key=$value;
		
		if(ereg("^fColumn_",$key))
		{
			
			if($value!="")
			{
				$d=split("_",$key);
				$id=$d[1];
				$selectcolumns[$g]=$value;
				$idset[$g]=$id;
				$g++;
			}
		
		}
	}
 	$empfile=$_FILES["fEmp"]["tmp_name"];
	$type=$_FILES["fEmp"]["type"];
	$sub="/employee";
	$filename="empdetails";
	$empfilename=$this->upload_cv($empfile,$filename,$type,$sub);
	if($empfilename)
	{
		$path=$this->path;
	  	$directory=$path."uploads/employee/";
		$filename=$directory.$empfilename;
		$fd = fopen($filename,"r");
		$contents = fread($fd,filesize($filename));
		fclose($fd);
	
		$lines=preg_split("/\\n/",$contents,-1,PREG_SPLIT_NO_EMPTY);
		$data=array_slice($lines,0);
		$config=$this->prefix_table("config");
		$qry="select delimiter from $config";
		$delimit=$db_object->get_a_line($qry);
		$delimiter=$delimit["delimiter"];
		$cnt=count($selectcolumns);
		

		
		$k=0;
		
		for($j=0;$j<count($data);$j++)
		{
			$valuerow=trim($data[$j]);
			
	
			if($valuerow=="")
				{
				continue;
				}
			$valuerowarray[$k]=explode($delimiter,$valuerow);
			$tem=$valuerowarray[$k];
			$k++;
	
			$nt=count($tem);
			if($cnt!=$nt)
			{
					echo $error_msg["cFieldmis"];
					include("footer.php");
					exit;
			}
			
		}
		
		for($i=0;$i<count($selectcolumns);$i++)
		{
			if($selectcolumns[$i]=="username")
			{
				$selval=$i;
				break;
			}
		}
/*	$user_table=$this->prefix_table("user_table");
	$selqry="select username from $user_table";
	$userset=$db_object->get_single_column($selqry);
	
	$f=0;
		for($i=0;$i<count($valuerowarray);$i++)
		{
			$user_name=trim($valuerowarray[$i][$selval]);
			
			for($j=0;$j<count($userset);$j++)
			{
				
				if($userset[$j]==$username)
				{
				//	$overwrite[$f]=$user_name;
				//	$over[$f]=$i;
				//	$f++;
					$del=$user_name;//data to be over written
					break;

				}
			}
			
		}
		*/

		
	
	$path=$this->path;
	$xFile=$path."templates/performance/import_alert.html";
	$xTemplate=$this->return_file_content($db_object,$xFile);


	preg_match("/<{column_namestart}>(.*?)<{column_nameend}>/s",$xTemplate,$match);
	$replace=$match[1];
	for($i=0;$i<count($selectcolumns);$i++)
	{
		$column_name=$selectcolumns[$i];
		$replace1=preg_replace("/{{column_name}}/s",$column_name,$replace);
		$replaced=$replaced.$replace1;
	}
	$xTemplate=preg_replace("/<{column_namestart}>(.*?)<{column_nameend}>/s",$replaced,$xTemplate);
	$replaced="";

	
	preg_match("/<{value_namestart}>(.*?)<{value_nameend}>/s",$xTemplate,$match);
	$replace=$match[1];
	$bit="</td><tr>";
	
	
	for($i=0;$i<count($valuerowarray);$i++)
	{
		for($j=0;$j<count($valuerowarray[$i]);$j++)
		{$value_name=$valuerowarray[$i][$j];
		$replace1=preg_replace("/{{value_name}}/s",$value_name,$replace);
	
		$replaced=$replaced.$replace1;
		}
		$replaced=$replaced.$bit;
	}

	$xTemplate=preg_replace("/<{value_namestart}>(.*?)<{value_nameend}>/s",$replaced,$xTemplate);
	
	preg_match("/<{hidden_fieldnamestart}>(.*?)<{hidden_fieldnameend}>/s",$xTemplate,$match);
	$repla=$match[1];


	for($i=0;$i<count($selectcolumns);$i++)
	{
		$fieldname=$selectcolumns[$i];
		$id=$i+1;
		$replaed.=preg_replace("/{{(.*?)}}/e","$$1",$repla);
	}

	$xTemplate=preg_replace("/<{hidden_fieldnamestart}>(.*?)<{hidden_fieldnameend}>/s",$replaed,$xTemplate);

	if($fReplace=="yes")
	{
		$vals["replc"]=$error_msg["will"];
		$vals["ovrwrte"]="overwrite";
	}
	else
	{
		$vals["replc"]=$error_msg["cNot"];
		$vals["ovrwrte"]="";
	}


	$vals["filename"]=$empfilename;
	$xTemplate=$this->direct_replace($db_object,$xTemplate,$vals);



	
	echo $xTemplate;
	include("footer.php");
	exit;
        }
	else
	{
		echo $error_msg["cFileMismatch"];
	}
   }


function savedbfile($db_object,$form_array,$error_msg,$default,$fUser_id)
   {
   	$r=0;
   	$type="type_".$default;
   	while(list($kk,$vv)=each($form_array))
   	{
   		$$kk=$vv;
   		if(ereg("^fFieldname_",$kk))
   		{
   				$fieldname[$r]=$vv;
   				$r++;
   		}
   	}     	


   	$user_table=$this->prefix_table("user_table");
   	$path=$this->path;
	  	$directory=$path."uploads/employee/";
		$filename=$directory.$fFilename;
		$fd = fopen($filename,"r");
		$contents = fread($fd,filesize($filename));
		fclose($fd);
		$lines=preg_split("/\\n/",$contents,-1,PREG_SPLIT_NO_EMPTY);
		$data=array_slice($lines,0);
		$config=$this->prefix_table("config");
		$qry="select delimiter from $config";
		$delimit=$db_object->get_a_line($qry);
		$delimiter=$delimit["delimiter"];
		$cnt=count($selectcolumns);
		$k=0;
		for($j=0;$j<count($data);$j++)
		{
		/*	$valuerow=$data[$j];
			$valuerowarray[$j]=explode($delimiter,$valuerow);
			$tem=$valuerowarray[$j];*/
			$valuerow=trim($data[$j]);
			if($valuerow=="")
				{
				continue;
				}
			$valuerowarray[$k]=explode($delimiter,$valuerow);
		//	$tem=$valuerowarray[$k];
			$k++;
	
		}

		$posidn="empty";
		$locidn="empty";
		$acrdn="empty";
			for($i=0;$i<count($fieldname);$i++)
			{
				if($fieldname[$i]=="position")
				{
					$idneeded=1;
					$posidn=$i;
					
				}
				else if($fieldname[$i]=="location")
				{
					$idneeded=1;
					$locidn=$i;
					
				}
				else if($fieldname[$i]=="access_rights")
				{
					$idneeded=1;
					$acrdn=$i;
					
				}
				if($fieldname[$i]=="username")
				{
					$selval=$i;
					
				}
			}
			
$location=$this->prefix_table("location");
$position=$this->prefix_table("position");
$access_rights=$this->prefix_table("access_rights");
//print_r($valuerowarray);
//exit;

		for($i=0;$i<count($valuerowarray);$i++)
		{

			if($idneeded)
			{
				if($posidn!="empty"||$posidn=="0")
				{
					
					$position_name=trim($valuerowarray[$i][$posidn]);
					$selpos="select pos_id from $position where position_name='$position_name'";
					$posid=$db_object->get_a_line($selpos);
					$valuerowarray[$i][$posidn]=$posid["pos_id"];
				}
				if($locidn!="empty"||$locidn=="0")
				{

					$location_name=trim($valuerowarray[$i][$locidn]);
					$selloc="select loc_id from $location where loc_name='$location_name'";
					$locid=$db_object->get_a_line($selloc);
					$valuerowarray[$i][$locidn]=$locid["loc_id"];
				}
				if($acrdn!="empty"||$acrdn=="0")
				{
					$access=trim($valuerowarray[$i][$acrdn]);
					$selacr="select id from $access_rights where $type='$access'";
					$acid=$db_object->get_a_line($selacr);
					$valuerowarray[$i][$acrdn]=$acid["id"];
				}
				
				
				
			}
			$username=$valuerowarray[$i][$selval];
			$sel="select user_id from $user_table where username='$username'";
			$rslt=$db_object->get_a_line($sel);
				
			if($fOverwrite && $rslt["user_id"])
			{	$user_id=$rslt["user_id"];
				$qry="update $user_table set ";
				$end=" where user_id='$user_id'";
				
			}
			else if(!$fOverwrite && $rslt["user_id"])
			{
				continue;
			}
			else
			{
			$qry="insert into $user_table set added_by='$fUser_id',";
			$end="";
			}
			for($j=0;$j<count($fieldname);$j++)
			{
				$vn=trim($valuerowarray[$i][$j]);
				$fn=trim($fieldname[$j]);
				$sub.="$fn='$vn',";
			}
//			$sub=substr($sub,0,-1);
			$sub.="reg_date=now() ";
			$qry.=$sub.$end;
			$db_object->insert($qry);
			$qry="";
			$sub="";
			$end="";
			
		}
		
	echo $error_msg["cEmpImported"] ;

/*
	if($fUser_id!=1)
{
$selqry="select username,password,email from $user_table where user_id=1";
$adminmailinfo=$db_object->get_a_line($selqry);
$vals["adminusername"]=$adminmailinfo["username"];
$vals["password"]=$adminmailinfo["password"];
$selqry="select username,email from $user_table where user_id='$fUser_id'";
$usermailinfo=$db_object->get_a_line($selqry);

$path=$this->path."index.php";
$vals["path"]=$path;
$from=$usermailinfo["email"];
$vals["username"]=$this->name_display($db_object,$fUser_id);
$to=$adminmailinfo["email"];
$config=$this->prefix_table("config");
$selqry="select toadmin_message,toadmin_subject from $config";
$maildetails=$db_object->get_a_line($selqry);
$message=$maildetails["toadmin_message"];
$subject=$maildetails["toadmin_subject"];
$message=$this->direct_replace($db_object,$message,$vals);
*/

$bool=$this->send_mail($to,$subject,$message,$from);
if($bool)
{
	echo $error_msg["cAdmininformed"];
}


	include("footer.php");	
   exit;	
   }

//----------------------------------------------------------------------------------------------------

 




function delete_position($db_object)
{

/* delete only the tables related to the modules bought*/

	$delete["position_table"]=$this->prefix_table("position");
	$delete["family_position_table"]=$this->prefix_table("family_position");
//	$delete["user_table"]=$this->prefix_table("user_table");
	$delete["temp_user_table"]=$this->prefix_table("temp_user_table");
	$delete["skill_builder"]=$this->prefix_table("skill_builder");
	$delete["objectives"]=$this->prefix_table("objectives");
	$delete["activites"]=$this->prefix_table("activites");
	$delete["skills_for_activites"]=$this->prefix_table("skills_for_activites");
	$delete["skills"]=$this->prefix_table("skills");
	$delete["temp_skill_builder"]=$this->prefix_table("temp_skill_builder");
	$delete["temp_objectives"]=$this->prefix_table("temp_objectives");
	$delete["temp_activites"]=$this->prefix_table("temp_activites");
	$delete["temp_skills_for_activites"]=$this->prefix_table("temp_skills_for_activites");
	$delete["unapproved_skill_builder"]=$this->prefix_table("unapproved_skill_builder");
	$delete["unapproved_objectives"]=$this->prefix_table("unapproved_objectives");
	$delete["unapproved_activites"]=$this->prefix_table("unapproved_activites");
	$delete["unapproved_skills_for_activites"]=$this->prefix_table("unapproved_skills_for_activites");
	$delete["skills"]=$this->prefix_table("skills");
	while(list($kk,$vv)=@each($delete))
	{
		$mysql="delete from '$vv'";
	//	$db_object->insert($mysql);
		echo "$mysql<br>";
	}

	$user_table=$this->prefix_table("user_table");
	$mysql="update $user_table set position=0";
	//$db_object->insert($mysql);
	echo "$mysql<br>";
	echo "You have to Rebuild the Whole Organisation <br>";
}
//--------------------returnds the levels that are in the System
function return_levels($db_object)
{

	$position_table=$this->prefix_table("position");
	$org_main=$this->prefix_table("org_main");
	$selqry="select levels,higher_order from $org_main";
	$orgrslt=$db_object->get_a_line($selqry);
	if($orgrslt["higher_order"]=="yes")
	{	
		for($i=$orgrslt["levels"];$i>=1;$i--)
		{
			
		  $levelrtn[$i]=$i;
		}	
	}
	else
	{
		
		for($i=1;$i<=$orgrslt["levels"];$i++)
		{
			
		  $levelrtn[$i]=$i;
		}
	}
	return $levelrtn;

}
function return_levels_belowme($db_object,$pos_id)
{

	$position_table=$this->prefix_table("position");

$selqry="select level_no from $position_table where pos_id='$pos_id'";
$pos_level=$db_object->get_a_line($selqry);

	$org_main=$this->prefix_table("org_main");
	$selqry="select levels,higher_order from $org_main";
	$orgrslt=$db_object->get_a_line($selqry);
	if($orgrslt["higher_order"]=="yes")
	{
		for($i=$pos_level["level_no"];$i>=1;$i--)
		{
			  $levelrtn[$i]=$i;
		}		
	}
	else
	{
		$temp=$orgrslt["levels"];
/*		for($i=$temp;$i>=$pos_level["level_no"];$i--)
		{			
		  $levelrtn[$i]=$i;
		}*/
		for($i=$pos_level["level_no"];$i<=$temp;$i++)
		{			
		  $levelrtn[$i]=$i;
		}
	}

	return $levelrtn;

}


//---------------------------------
function answerCount($db_object)
{

	$config_table = $this->prefix_table("config");

	$mysql = "select answer_count from $config_table";
	$ans_arr = $db_object->get_a_line($mysql);
	$ans_cnt = $ans_arr["answer_count"];
	return $ans_cnt;
}
//-------------fucntion to return the admins of an employe  with certain charecteristics-----------------------------------
function return_my_admin($db_object,$charec)
{
$admins=$this->prefix_table("admins");

while(list($kk,$vv)=@each($charec))
{
$$kk=$vv;
}
/*$mysql="select distinct($admins.user_id) as admin_id from $admins,
	$admins as adm1,$admins as adm2,$admins as adm3,
	$admins as adm4,$admins as adm5
	where $admins.user_id=adm1.user_id and 
	$admins.user_id=adm2.user_id and 
	$admins.user_id=adm3.user_id and
	$admins.user_id=adm4.user_id and
	$admins.user_id=adm5.user_id and 
	$admins.emp_type_id='$employment_type' and 
	adm1.boss_id='$boss_id' and  
	adm2.pos_id='$pos_id' and 
 	adm3.location_id='$location_id' and 
	adm4.fam_id ='$family_id' and
	adm5.level_id='$level_no'";
	$admin_idset=$db_object->get_rsltset($mysql);*/

	
	
	$mysql="select distinct(user_id) from $admins";
	$result=$db_object->get_single_column($mysql);
	
		$mysql="select user_id from $admins where emp_type_id='$employment_type'";
	
		$admin_idset[0]=$db_object->get_single_column($mysql);

		if(count($admin_idset[0])!=0)
		{
			$result1=array_intersect($result,$admin_idset[0]);
			if(count($result1)!=0)
			{
				$result=$result1;
			}
			
		}


	
		$mysql="select user_id from $admins where level_id='$level_no'";
		$admin_idset[1]=$db_object->get_single_column($mysql);
	
		
		if(count($admin_idset[1])!=0)
		{
			$result1=array_intersect($result,$admin_idset[1]);
			if(count($result1)!=0)
			{
				$result=$result1;
			}
		}

	
		$mysql="select user_id from $admins where boss_id='$boss_id'";
		
		$admin_idset[2]=$db_object->get_single_column($mysql);
		if(count($admin_idset[2])!=0)
		{
			$result1=array_intersect($result,$admin_idset[2]);
			if(count($result1)!=0)
			{
				$result=$result1;
			}
		}
		
		$mysql="select user_id from $admins where location_id='$location_id'";
		$admin_idset[3]=$db_object->get_single_column($mysql);
		if(count($admin_idset[3])!=0)
		{
			$result1=array_intersect($result,$admin_idset[3]);
			if(count($result1)!=0)
			{
				$result=$result1;
			}
		}

		
		$mysql="select user_id from $admins where fam_id='$family_id'";
		$admin_idset[4]=$db_object->get_single_column($mysql);
		
		if(count($admin_idset[4])!=0)
		{
			$result1=array_intersect($result,$admin_idset[4]);
			if(count($result1)!=0)
			{
				$result=$result1;
			}
		}


		$mysql="select user_id from $admins where pos_id='$pos_id'";
		$admin_idset[5]=$db_object->get_single_column($mysql);
				
		if(count($admin_idset[5])!=0)
		{
		$result=array_intersect($result,$admin_idset[5]);
		}


$keys=@array_keys($result);

$key=$keys[0];

$result=$result[$key];

return $result;


}
//--------------------fucntion ends---------------------
//-----------this funtion deletes an employee completely from oragnisation providee the user_id

function delete_employee($db_object,$user_id,$gbl_delete_table)
{

	$ch_boss=$this->is_boss($db_object,$user_id);
	
	$ch_admin=$this->is_admin($db_object,$user_id);
	
	if(($ch_boss)||($ch_admin!=0))
	{
		
		return(false);
	}
	else
	{

	$values=@array_values($gbl_delete_table);
		
	$keys=@array_keys($gbl_delete_table);
	
		for($a=0;$a<count($keys);$a++)
		{
			$delqry="delete from $keys[$a] where $values[$a]='$user_id'";
			
			
			$db_object->insert($delqry);
		}
		
		return(true);
	}


	
}
//---------------------------------------------

//don't delete the third argument .. ask celia for more details

function lang_menu($db,$default,$form_array)
{
	$path = $this->path;
	$filename = $path."templates/langmenu.html";
	
	$file = $this->return_file_content($db,$filename);


	$lang_table = $this->prefix_table("language");
	$desc = "desc $lang_table";
	$res = $db->get_single_column($desc);

	$sp = implode(",",$res);

	$mysql="select $sp from $lang_table";
			
	$lang_rslt=$db->get_rsltset($mysql);
	
	$qry = "select lang_id,lang_$default from $lang_table";
	
	$res = $db->get_rsltset($qry);
	
	$pattern="/<{lang_loopstart(.*?)<{lang_loopend}>/s";
	preg_match($pattern,$file,$arr);
		$match=$arr[0];
		$str="";
		$selected="";
		$l = "lang_".$default;
			for($i=0;$i<count($res);$i++)
			{
				
				$lang_id = $res[$i][0];

				if($lang_id==$default)
					{
						$selected="selected";
					}
				else
					{
						$selected="";
					}				
				$lvar="lang_".$lang_id;
				//$language = $lang_rslt["$lvar"];
				$language = $res[$i][$l];
				$str.=preg_replace("/\<\{(.*?)\}\>/e","$$1",$match);
				
			}
		
	$out=preg_replace($pattern,$str,$file);
	$array=array();
	$out = $this->direct_replace($db_object,$out,$form_array);
	echo ($out);

}

//----------------------------------------------

function return_fields($db_object,$tablename)
{
$mysql = "desc $tablename";
$desc_arr = $db_object->get_single_column($mysql);
$fields = implode(",",$desc_arr);
return $fields;
}


//----------------------------------------------
function return_Keyedarray($arr,$key,$value)
{
	for($i=0;$i<count($arr);$i++)
		{
	$key_val=$arr[$i]["$key"];
	$value_val=$arr[$i]["$value"];
	$new_arr["$key_val"]=$value_val;
		}
	return $new_arr;
}

//--------------------------------------------------------------

/* this function  will implode the fieldname with similar grp_field
please dont use this function because this is only used in the test_question.php

*/

function group_similar($db_list,$grp_field,$fieldname)
	{
	for($i=0;$i<count($db_list);$i++)
		{
		$catname=$db_list[$i][$grp_field];
		$fieldvalue=$db_list[$i][$fieldname];
		$catlist[$catname][]=$fieldvalue;
		if($db_list[$i]["status"]=="r")
		{
					$catlist[$catname]["correct"]=$db_list[$i]["answer"];
		}
	}
/*
print_r($catlist);
	$catname_list=@array_keys($catlist);
	
	

	for($i=0;$i<count($catname_list);$i++)
		{
		$catname=$catname_list[$i];
		$img_arr=$catlist[$catname];
		$joined=@implode("::",$img_arr);
		$new_list[$i][$grp_field]=$catname;
		//$new_list[$i][0]=$catname;
		$new_list[$i][$fieldname]=$joined;
		//$new_list[$i][1]=$joined;
		}
		//print_r($new_list);


echo $fieldname;
for($i=0;$i<count($db_list);$i++)
{
	$catname=$db_list[$i][$grp_field];
	$fieldvalue=$db_list[$i][$fieldname];

echo "cat=$catname";
echo "fel=$fieldvalue";
	
}
*/
$new_list=$catlist;		
	return $new_list;
	}
	
//-----------------------------------------------------------------

function return_eeo_status($db_object)
{
	$opp_status=$this->prefix_table("opportunity_status");
//	$fields=$this->return_fields($db_object,$opp_status);
	$selqry="select eeo_id as tag_id,tag as tag_name from $opp_status";
	$eeoarray=$db_object->get_rsltset($selqry);
	return $eeoarray;
	
}

//-----------------------------------------------------	
function return_location_for_display($db_object,$location_id=null)
{
	$location_table=$this->prefix_table("location_table");
	$field=$this->return_fields($db_object,$location_table);
	if($location_id==null)
	{
		$selqry="select $field from $location_table";
	}
	else
	{
	$selqry="select $field from $location_table  where location_id='$location_id'";
	}
	//echo $selqry;
	$locationset=$db_object->get_rsltset($selqry);
	for($i=0;$i<count($locationset);$i++)
	{
		$loc_id=$locationset[$i]["location_id"];
		$location[$loc_id]=$locationset[$i]["first_level"].",".$locationset[$i]["second_level"].",".$locationset[$i]["third_level"].",".$locationset[$i]["fourth_level"].",".$locationset[$i]["fifth_level"].",".$locationset[$i]["sixth_level"].",".$locationset[$i]["seventh_level"];
	}
	return $location;
}

	
//---------------------------------------------------



function numeric_check($str1)
     {
  if(ereg("[^0-9]",$str1)) 
          {
             return 1;
          }
       }//numeric_check1 ends 
       
//----------------------------------------------------
function take_test($db_object,$form_array,$user_id,$quest_tablename,$test_tablename,$ans_tablename,$skill_percent_tablename)
{
	while(list($kk,$vv)=@each($form_array))
		{

		$$kk=$vv;
		//echo "key is $kk and val is $vv<br><br><br>";	
		}

	$xPath=$common->path;
	$xTemplate=$xPath."../templates/career/take_test.html";
	$returncontent=$this->return_file_content($db_object,$xTemplate);


	

	$quest_table=$this->prefix_table("$quest_tablename");
	$test_table=$this->prefix_table("$test_tablename");
	$ans_table=$this->prefix_table("$ans_tablename");
	$skill_percent = $this->prefix_table("$skill_percent_tablename");
	
	$mysql = "select test_type from $test_table where test_id='$test_id'";

	$testtype_arr = $db_object->get_a_line($mysql);
		
	$test_type = $testtype_arr["test_type"]; 

$values["directreplace"]["fTestname"]=$fTestname;
$values["directreplace"]["test_id"]=$test_id;
$values["directreplace"]["test_type"]=$test_type;
$values["directreplace"]["test_mode"]=$test_mode;

	//$returncontent = preg_replace("/{{(.*?)}}/e","$$1",$returncontent);
$returncontent = $this->direct_replace($db_object,$returncontent,$values);
	
	

	$mysql = "select * from $quest_table where test_id='$test_id' order by q_id "; //$test_id
	$questions_arr = $db_object->get_rsltset($mysql);

	preg_match("/<{quest_loopstart}>(.*?)<{quest_loopend}>/s",$returncontent,$qmatch);
	$newqmatch = $qmatch[1];
	
	$str = "";	

	preg_match("/<{ans_loopstart}>(.*?)<{ans_loopend}>/s",$returncontent,$amatch);
		

	for($i=0;$i<count($questions_arr);$i++)
		{
		$No = $i + 1;
		$newamatch = $amatch[1];
		
		
		
		$str1 = "";
		
		$q_id = $questions_arr[$i]["q_id"];
		$question = $questions_arr[$i]["question"];
		$status = $questions_arr[$i]["status"];
		$skill_id = $questions_arr[$i]["skill_id"];
		
		$mysql = "select * from $ans_table where q_id='$q_id' order by ans_id";
		//echo $mysql;
		$ans_arr = $db_object->get_rsltset($mysql);



			for($j=0;$j<count($ans_arr);$j++)
			{
			
			$ans_id = $ans_arr[$j]["ans_id"];
			$answer = $ans_arr[$j]["answer"];
			
			$answer=str_replace("$","&#36;",$answer);
					
			$ans = preg_replace("/<{(.*?)}>/e","$$1",$newamatch);

			$str1 .= $ans;
			
			}

		$finalmatch = preg_replace("/<{ans_loopstart}>(.*?)<{ans_loopend}>/s",$str1,$newqmatch);
		
		$questions = preg_replace("/<{(.*?)}>/e","$$1",$finalmatch);
	
		$str .= $questions;

		}
	$returncontent = preg_replace("/<{quest_loopstart}>(.*?)<{quest_loopend}>/s",$str,$returncontent);
		


	echo $returncontent;

}

//--------------------FUNCTIO TO RETURN LOCATION-------------------------



function return_location($db_object,$location_id=null)
{


	$location_table=$this->prefix_table("location_table");
	$field=$this->return_fields($db_object,$location_table);
	if($location_id==null)
	{
		$selqry="select $field from $location_table";
	}
	else
	{
	$selqry="select $field from $location_table  where location_id='$location_id'";
	}
	//echo $selqry;
	$locationset=$db_object->get_rsltset($selqry);


	for($i=0;$i<count($locationset);$i++)
	{
		$location[$i]["location_id"]=$locationset[$i]["location_id"];
		$location[$i]["location_name"]=$locationset[$i]["first_level"].",".$locationset[$i]["second_level"].",".$locationset[$i]["third_level"].",".$locationset[$i]["fourth_level"].",".$locationset[$i]["fifth_level"].",".$locationset[$i]["sixth_level"].",".$locationset[$i]["seventh_level"];
	}
	
	return 	$location;
}
   
//----------------------------------------------------   
       
function showForm($db_object,$common,$form_array,$user_id,$error_msg,$fTest_type=null,$group_id=null)
	{



	$values["directreplace"]=$form_array;
	
		while(list($kk,$vv)=@each($form_array))
		{
		$$kk=$vv;
		
		}
	

	$xTemplate=$xPath."../templates/career/test_builder.html";
	
	$returncontent=$this->return_file_content($db_object,$xTemplate);

	$values['mode'] = $mode;

	//if($mode == 'alert') 

	if(isset($mode) && ($user_id != 1))
		{

			
			$returncontent =preg_replace("/<{ismodealert_start}>(.*?)<{ismodealert_end}>/s","",$returncontent);
			$returncontent=preg_replace("/<{checkmode_loop(.*?)}>/s","",$returncontent);
		}
	elseif(!isset($mode) && ($user_id != 1))
		{

			$returncontent=preg_replace("/<{ismodealert_(.*?)}>/s","",$returncontent);
			$returncontent =preg_replace("/<{checkmode_loopstart}>(.*?)<{checkmode_loopend}>/s","",$returncontent);
		}

	if($user_id == 1)
		{
			
			$returncontent=preg_replace("/<{ismodealert_(.*?)}>/s","",$returncontent);
			$returncontent=preg_replace("/<{checkmode_loop(.*?)}>/s","",$returncontent);			
		}
		else
		{
			$returncontent =preg_replace("/<{ismodealert_start}>(.*?)<{ismodealert_end}>/s","",$returncontent);
			$returncontent =preg_replace("/<{checkmode_loopstart}>(.*?)<{checkmode_loopend}>/s","",$returncontent);
		}
	

$assign_test_builder = $this->prefix_table('assign_test_builder');

$mysql = "select group_id from $assign_test_builder where user_id='$user_id'";
//echo $mysql;
$group_arr = $db_object->get_single_column($mysql);
if($group_id != '')
{
for($l=0;$l<count($group_arr);$l++)
{
	$check_group = $group_arr[$i];
	//echo "group id is $group_id<br>";
	
	$check = @in_array("$group_id",$group_arr);
			if(!$check)
			{
				$message = $error_msg['cAlertHackertestbuilder'];
				echo $message;
				exit;
			
			}
}
}

	$un_test_table = $this->prefix_table("unapproved_tests");

	$approved_test_table=$this->prefix_table("tests");

		if($user_id==1)
		{

		$mysql = "select test_id,test_name from $approved_test_table";
		$un_arr = $db_object->get_rsltset($mysql);



		}
		else
		{
		
		$mysql = "select test_id,test_name from $un_test_table where user_id='$user_id'";

		$un_arr = $db_object->get_rsltset($mysql);


		}


		for($j=0;$j<count($un_arr);$j++)
			{
			$test_id = $un_arr[$j]["test_id"];

			$new_un_content = $this->conv_2Darray($db_object,$un_arr);
			$returncontent = $this->pulldown_replace($db_object,'<{unapproved_loopstart}>','<{unapproved_loopend}>',$returncontent,$new_un_content,"");
			}



	$tests_table=$this->prefix_table("temp_tests");
	$mysql = "select test_id,test_name from $tests_table where user_id = '$user_id'";


	$temp_arr = $db_object->get_rsltset($mysql);

	
	for($i=0;$i<count($temp_arr);$i++)
	{
	$test_id = $temp_arr[$i]["test_id"];
	
	
	$newcontent	= $this->conv_2Darray($db_object,$temp_arr);

	$returncontent = $this->pulldown_replace($db_object,'<{test_loopstart}>','<{test_loopend}>',$returncontent,$newcontent,"");
	
	
	}
	if($fTest_type=="t")
	{
	
		$values["directreplace"]["tchecked"]="checked";
		$values["directreplace"]["ichecked"]="";
	}
	else if($fTest_type=="i")
	{
		$values["directreplace"]["ichecked"]="checked";
		$values["directreplace"]["tchecked"]="";
	}
	else
	{
		$values["directreplace"]["ichecked"]="";
		$values["directreplace"]["tchecked"]="";
	}

$values["directreplace"]["group_id"]=$group_id;

	$returncontent = $common->direct_replace($db_object,$returncontent,$values);
	
	$returncontent = $this->replace_templatecontent($db_object,$returncontent,$values);


	echo $returncontent;
	}


//------------------------------------------------------------------

function prefix_table($tablename)
{
if($tablename =="user")
{
	$tablename = $prefix.$tablename."_table";
	return $tablename;
}
$prefix=$this->prefix;
$tablename=$prefix.$tablename;
return $tablename;
}
//-----------------------------------------------------------------------
/* this function returns 0 if user is not an admin or returns 1 */

function is_admin($db_object,$user_id)
{
	$user_table=$this->prefix_table("user_table");
	$admins_table=$this->prefix_table("admins");

	$selqry="select user_id from $admins_table where user_id='$user_id'";
	$yes=$db_object->get_a_line($selqry);
	$selqry="select user_id from $user_table where admin_id='$user_id'";
	$user_set=$db_object->get_single_column($selqry);

	if($user_set[0]=="" && !$yes["user_id"])
	{
		return 0;
	}
	else
	{
		return 1;
	}
}


//---------------------------------------------------------------------
/* function will open a existing file and return its contents */

function return_file_content($db_object,$xpath,$user_id=null)
{


$fp=fopen("$xpath","r"); 
$fullcontent=fread($fp,filesize("$xpath"));
fclose($fp);


if($user_id==1)
{

$fullcontent=preg_replace("/<{edit_settings_(.*?)}>/s","",$fullcontent);
$fullcontent =preg_replace("/<{usersettings_start}>(.*?)<{usersettings_end}>/s","",$fullcontent);

}
else
{
$fullcontent=preg_replace("/<{edit_settings_start}>(.*?)<{edit_settings_end}>/s","",$fullcontent);
}
if($user_id!=1)
{
	$fullcontent = preg_replace("/<{usersettings_(.*?)}>/s","",$fullcontent);
}

return $fullcontent;
}

//-----------------------------------------------------------------------------
function hashgen()//to generate a secure unique sessionkey
{
$hash = md5(uniqid(rand(),1));
return $hash;
}//function hashgen()
//----------------------------------------------------------------
/* function will print out the html design for admin panel without replacing any variable*/

function print_html($db_domain,$xpath)
{
$fullcontent=$this->return_file_content($db_domain,$xpath);

echo $fullcontent;

}

//-------------------------------------------------------------------------------
function print_after_replace($db_domain,$xpath,$xArray)
{
while(list($key,$value)=each($xArray))
{
$$key=$value;
//echo "key=$key";
//echo "value=$value";
}


$fullcontent=$this->return_file_content($db_domain,$xpath);

$fullcontent = preg_replace("/{{(.*?)}}/e" , "$$1" , $fullcontent);

echo $fullcontent;


}
//----------------------------------------------------------------------------
function check_session_super($hash,$db_domain)//checks if the site was last accessed before 20min and if so prompts user to relogin
  {
//include("../lang/eng.php");
//prefix
	$user_session = $this->prefix_table("user_session");
	$config = $this->prefix_table("config");
	$cqry = "select min_time from $config where id=1";
	$dres = $db_domain->get_a_line($cqry);

    $qry="Select user_id,timestamp from $user_session where hash='$hash'";

    $line = $db_domain->get_a_line($qry);
    
    $usrid=$line[0];
	$min_logout_time=$dres['min_time'];
	$min=$min_logout_time*60;
	
    if( (time() - $line[1] ) > $min )
    {
     // echo("$session_timed_out");
      return 0;
    }//end if
    else
    {

        $timestmp=time();
  	$qry="Update $user_session set timestamp=$timestmp where hash='$hash'";
        if (! ($result = mysql_query ("$qry")))
        {
          $men = mysql_errno();
          $mem = mysql_error();
          echo ("<h4>$qry  $men $mem</h4>");
          exit;
        }//end inner if
        else
        {
          return $usrid;
        }//end inner else

    }//end else

   
  }//function check_session()
//---------------
function direct_replace($db_object,$read,$values)
{
$default=$_COOKIE["lang"];

if($default=="")
{
$default=1;
}

$path=$this->path;
$http=$this->http_path;

include("$path/lang/$default/lang.php");


if($values['uid']=='1')
	{
		
		$error_msg["cApproval"] = "Approved";		
	}

$keyexist=@array_key_exists("directreplace",$values);


$u_id=$values['uid'];
$user = $value['user'];



if($keyexist)
	{
	$values=$values["directreplace"];
	}


	$values=@array_merge($values,$error_msg);
//	print_r($values);

		while (list($k, $v) =@each ($values))
		 {
		$$k=stripcslashes($v);
		 }
	
 
$replaced = preg_replace("/\{\{(.*?)\}\}/e" , "$$1" , $read);

return $replaced;
}

function direct_replace_single($db_object,$read,$values)
{
	while (list($k,$val) = @each($values))
	{
		$$k	= $val;

	}
	$replaced	= preg_replace("/{{(.*?)}}/e","$$1",$read);
	
	return $replaced;
}


//------------singleloop_replace form single list box--------
function singleloop_replace($db_object,$loopstart,$loopend,$templatecontent,$listarray,$sel_val)
{

	preg_match("/$loopstart(.*?)$loopend/s",$templatecontent,$matches);
	$match	= $matches[1];
	$str	= "";

//echo $match;
//print_r($listarray);
//echo "sel val=$sel_val";
		while(list($key,$value)=@each($listarray))
		{
			$key1 = $key + 1;
			$selected	="";
			$checked	="";
			if ($key == $sel_val)
			{
				$selected	= "selected";
				$checked	= "checked";
			}
			$str	.= preg_replace("/<{(.*?)}>/e","$$1",$match);
		}
		$templatecontent= preg_replace("/$loopstart(.*?)$loopend/s",$str,$templatecontent);
//echo $templatecontent;
	return $templatecontent;
}

function replace_single_loop($db_object,$read,$arr,$loop,$default)
{
	$pattern="/<{".$loop."_loopstart}>(.*?)<{".$loop."_loopend}>/s";



preg_match($pattern,$read,$out);


		$myvar=$out[0];	
		$selected="";

	$str="";



$keys=@array_keys($arr[0]);

		for($i=0;$i<count($arr);$i++)
		{

		for($j=0;$j<count($keys);$j++)
		{

		$field=$keys[$j];

		

		$$field=$arr[$i][$field];
	

		}		


		//$lang_id=$arr[$i][0];



		//$lang=$arr[$i][1];





		



		if($default==$$field)

		{
		$selected="selected";
		}
		else
		{
		$selected="";
		}



	

		$str.=preg_replace("/<{(.*?)}>/e","$$1",$myvar);

		//echo $str;

		

		}



$read=preg_replace($pattern,$str,$read);





//echo $read;





return $read;

}


//-------------simpleloopprocess-------------------
function simpleloopprocess($db_object,$read , $values)
  {


$repl=preg_replace("/<\{(.*?)_loopstart\}>(.*?)<\{(.*?)_loopend\}>/s","<\{$1_loopstart}>$1loopcontent<\{$1_loopend}>",$read);

preg_match_all("/<\{(.*?)_loopstart\}>(.*?)<\{(.*?)_loopend\}>/s",$read,$out,PREG_SET_ORDER);

$cnt1=count($out);

for($i=0;$i<$cnt1;$i++)
      {
$vararr=array();

$cloop=$out[$i][0];


preg_match("/<\{(.*?)_loopstart\}>/",$cloop,$getname);


$gname=$getname[1]."_loop";

$gname1="<{".$getname[1]."_loopstart}>".$getname[1]."loopcontent<{".$getname[1]."_loopend}>";

//$gname1=$getname[1]."loopcontent";

//echo "<br>$gname1";

if(count($values)>0)
{

$keyexist=array_key_exists($gname,$values);
}


if($keyexist)
   {
$replacedloop="";

while (list($k, $v) = @each ($values["$gname"]))
 {
$vararr[]=$k;
$$k=$v;
 }


$cnt=count($values["$gname"]["$vararr[0]"]);


$myvar=$values["$gname"]["$vararr[0]"];

//print_r($myvar);


$arrvar=@array_keys($myvar);



//print_r($vararr);

//print_r($arrvar);


$flag=0;


  for($k=0;$k<count($vararr);$k++)
     {

//echo "varname=$varname<br>";

       for($l=0;$l<count($arrvar);$l++)
           {
$varname=$arrvar[$l];

$values["$gname"]["$k"]["$varname"]=str_replace("$","&#36;",$values["$gname"]["$k"]["$varname"]);

$$varname=$values["$gname"]["$k"]["$varname"];

/* checks whether option is to be checked or selected */

if($values["loop_selected"]["$gname"]["$varname"]==$$varname)
		{
		$flag=1;
		}
		if($flag==1 && $l==(count($arrvar)-1))
		{
//		echo "<b>enters here with var=$varname val=$cur_val</b><br>";
		$selected="selected";
$checked="checked";
		$flag=0;
		}
		else
		{
		$selected="";
		$checked="";
		}
            }
        
            //echo "cloop=$cloop<br><hr>";
            
$replacedloop.= preg_replace("/<{(.*?)}>/e" , "$$1" , $cloop);


     }
//echo("<br>replacedloop= $replacedloop");


$repl=preg_replace("/$gname1/",$replacedloop,$repl);

$selected="";
$flag=0;

   }
      }//for loop

return $repl;


  }//fun ends
//-------------replce the tempalte content-------------


function replace_templatecontent($db_object,$read,$values)
    {



$read=$this->simpleloopprocess_direct($read , $values);

$read=$this->simpleloopprocess($db_object,$read , $values);

//$read=$this->simpleloopprocess($read , $values);


$retcontent=$this->direct_replace($db_object,$read,$values);


return $retcontent;



    }




function simpleloopprocess_direct($read , $values)//function to replace non db array values
   {
$repl=preg_replace("/~~(.*?)_directbegin~~(.*?)~~(.*?)_directclose~~/s","~~$1_directbegin~~$1directloopcontent~~$1_directclose~~",$read);
preg_match_all("/~~(.*?)_directbegin~~(.*?)~~(.*?)_directclose~~/s",$read,$out,PREG_SET_ORDER);

$cnt1=count($out);

for($i=0;$i<$cnt1;$i++)
      {
$vararr=array();

$cloop=$out[$i][0];

preg_match("/~~(.*?)_directbegin~~/",$cloop,$getname);

$gname=$getname[1]."_directloop";

$gname1="~~".$getname[1]."_directbegin~~".$getname[1]."directloopcontent~~".$getname[1]."_directclose~~";

if(count($values)>0)
{
$keyexist=array_key_exists($gname,$values);
}

if($keyexist)
   {
$replacedloop="";
while (list($k, $v) = @each ($values["$gname"]))
 {
$vararr[]=$k;
$$k=$v;
 }

$cnt=count($values["$gname"]["$vararr[0]"]);

//echo "cloop=$cloop<br>";


  for($k=0;$k<$cnt;$k++)
     {
        for($l=0;$l<count($vararr);$l++)
           {
$varname=$vararr[$l];
$$varname=$values["$gname"]["$varname"][$k];
            }
$replacedloop.= preg_replace("/~~(.*?)~~/e" , "$$1" , $cloop);
     }

$repl=preg_replace("/$gname1/",$replacedloop,$repl);


   }



      }//for loop



return $repl;




   }













function upload_cv($cv_file,$id,$type,$subdir)//for admin to add images
  {

$a=strcasecmp($type,"application/octet-stream");
$b=strcasecmp($type,"text/html");
$c=strcasecmp($type,"text/plain");
$d=strcasecmp($type,"application/msword");
$e=strcasecmp($type,"image/pjpeg");
$f=strcasecmp($type,"image/gif");
$g=strcasecmp($type,"image/png");
if($a==0)
  {
  $suf=".csv";
  }
else if($b==0)
  {
  $suf=".html";
  }
else if($c==0)
  {
  $suf=".txt";
  }
else if($d==0)
  {
  $suf=".doc";
  }
 else if($e==0)
 {
 	$suf=".jpg";
 }
 else if($f==0)
 {
 	$suf=".gif";
 }
 else if($g==0)
 {
 	$suf=".png";
 }
 
$file=$id.$suf;

$dir=$this->path."uploads";

if($subdir)
{
	$dir=$dir.$subdir;

}

if(($type=="application/octet-stream") || ($type=="text/html") || ($type=="text/plain")|| ($type=="application/msword") || ($type="image/jpeg") || ($type="image/gif") || ($type="image/png"))
 {

$file_name="$dir/$id$suf";

/*echo $file_name;
echo "<br>";*/
move_uploaded_file ("$cv_file" , "$dir/$id$suf");
chmod ($file_name, 0777);   
return($file);
  }
else
  {
//echo("<h3>Error:not possible to load a non txt/html/richtext/msword file</h3>") ;
return 0;
  }

}//fun ends







//---------------------------------------------------------------------------------------------
function check_email($email)

{
if (! (preg_match ("/(@.*@)|(\.\.)|(@\.)|(\.@)|(^\.)/", "$email") || preg_match("/^.+\@(\[?)[a-zA-Z0-9\-\.]+\.([a-zA-Z]{2,3}|[0-9]{1,3})(\]?)$/" , "$email") && $email != ""))
{

return 0;

}
else
{

return 1; // proper one

}
}
//----------------------------------------------------------------------------------------------
function check_url($url)
{
$url=ereg_replace("http://","",$url);
$url=ereg_replace("www\.","",$url);
if(ereg("[0-9a-zA-Z-]",$url))
  {
//echo("url=$url");
  }
else
 {
$r=1;
 }
if($r!=1)
 {
$r=$this->check_count($url);
$furl=$r;
 }

if($r==1)
 {

return $r;
 }

}

//---------------------------
function check_count($str1)
 {
if(ereg("\.",$str1))
 {
//echo("enters here");
$val=explode(".",$str1);
$c=count($val);
//echo("c=$c");
$c1=$c-1;
$len=strlen($val[$c1]);
//echo("len=$len");
$s=$val[$c1];
//echo("s=$s");
   if($len>=2 && $len<=4)
      {
if(ereg("[^a-zA-Z]",$s))
     {
    return 1;
     } 
  else
    {
  return $str1;
    }
      }
   else
    {
   return 1;
    }
 }
else
  {
 return 1;
  }
}//fun ends
//----------------------------------------
function check_for_http($url)
{
if(preg_match("/http:\/\//",$url)) // if url contains http
{
return $url;
}
elseif(preg_match("/https:\/\//",$url)) // if url contains https
{
return $url;
}
else
{
$url="http://".$url;
return $url;
}


}
//======================================================
function pulldown_replace($db_object,$loopstart,$loopstop,$template,$readvalues,$sel_val)
{
	preg_match("/$loopstart(.*?)$loopstop/s",$template,$matches);
	$match	= $matches[1];
	$str	= "";
//print_r($readvalues);
//echo $match;
	if (count($readvalues)>0)
	{
		while (list($key,$value) = @each($readvalues))
		{
			$sel	="";

			if (($key == $sel_val)) //|| ($value == $sel_val)
			{

				$sel	= "selected";
			}
			$str	.= preg_replace("/<{(.*?)}>/e","$$1",$match);
		}

		$template	= preg_replace("/$loopstart(.*?)$loopstop/s",$str,$template);
		

	}
	return $template;	
}
//----- function pulldown_replace ends

//------------------------------------------------------------------

function email_to_admin($db_object,$user_id)
{

//codings for sending email to the system owner....
	
	$config=$this->prefix_table("config");
	
$mysql="select tbsubject,tbmessage from $config";
$rslt_arr=$db_object->get_a_line($mysql);

//print_r($rslt_arr);

$tbsubject=$rslt_arr["tbsubject"];
$tbmessage=$rslt_arr["tbmessage"];

$user=$this->prefix_table("user_table");

$subqry2="select username,email from $user where user_id='$user_id'";

$user_name=$db_object->get_a_line($subqry2);

//$to=$user_name["username"]."admin@Pms.com";

$from=$user_name["email"];

$subqry2="select email from $user where user_id='1'";

$sys_email=$db_object->get_a_line($subqry2);

$to=$sys_email["email"];

$mysql = "select username from $user where user_id = '1'";
$admin_detail_arr = $db_object->get_a_line($mysql);

//$values["directreplace"]["login_username"]=$admin_detail_arr["username"];
//$values["directreplace"]["login_password"]=$admin_detail_arr["password"];

$values["directreplace"]["username"]=$user_name["username"];
$values["directreplace"]["url"]=$this->http_path."/index.php";
$tbmessage=$this->direct_replace($db_object,$tbmessage,$values);
$sent=$this->send_mail($to,$tbsubject,$tbmessage,$from);

	if($sent)
	{
		
		echo $alert_msg["cMailsent"];
		
	}
	else
	{
		echo $alert_msg["cFailmail"];
	}

}
//------------------------------------------------------------------
function send_mail($to,$subject,$message,$from)
{

$user_table=$this->prefix_table("user_table");
$selqry="select username,password from $user_table where email='$to'";
$reciever_detail=$this->get_a_line($selqry);
$directory=$this->path;
$filename="includes/logininfo.php";
$filename=$directory.$filename;


$fd = fopen($filename,"r");
$contents = fread($fd,filesize($filename));
fclose ($fd);

$username=$reciever_detail["username"];
$password=$reciever_detail["password"];
$url=$this->http_path;
$url=$url."/index.php";

$contents=preg_replace("/{{(.*?)}}/e","$$1",$contents);
$message.=$contents;



$filename="d:/work/learning/pms/mail/$to.txt";
$fp=fopen($filename,"w");
fwrite($fp,$message);
fclose($fp);
/* */




//echo "to=$to <bR>sub=$subject<bR> message=$message<bR> from=$from<bR><bR>";

//echo "to=$to,from=$from,subject=$subject,message=$message<br>";



/* CODE ADDED ON JUNE 20 to MAKE THE TEXT WRAP */

preg_match("'<[\/\!]*?[^<>]*?>'si",$message,$out);

$myvar=$out[0];

if($myvar!=null) // html mail

{

$headers  = "MIME-Version: 1.0\n";
$headers .= "Content-type: text/html; charset=iso-8859-1\n";
$headers .= "From: $from\n";

}

else // text mail

{
$headers  = "MIME-Version: 1.0\n";
$headers .= "Content-type: text/plain; charset=iso-8859-1\n";
$headers .= "From: $from\n";

$message=@wordwrap($message);

}





$bool=@mail("$to", "$subject", $message,"$headers");

//echo "bool=$bool";


return 1;

}
//---------------------------------------------------------------------	

function write_to_file($db_object,$filename,$content)

{

//echo "filename=$filename";

$fp=fopen("$filename","w");

fwrite($fp,$content);

fclose($fp);



}



//============= Function converts the 2D array(Only 2 X 2 not 3x2 or 2x5) into a 1D array.
//------------- Sets the first column of the given 2D array as key and the second column as the value
//============= Mainly used to send 1D array to pulldown_replace function

function conv_2Darray($db_object,$readarray)
{
	$return_array	= Array();
	$i=0;
	foreach($readarray as $read)
	{
		$return_array[$read[0]]	= $read[1];
	}

	return $return_array;
}//---------- Function conv_2Darray ends
//===========================================================================
function pulldown_replace_multiple($db_object,$loopstart,$loopstop,$template,$readvalues,$sel_val)
{
	preg_match("/$loopstart(.*?)$loopstop/s",$template,$matches);
	$match	= $matches[1];
	$str	= "";
//print_r($readvalues);
//echo $match;

//print_r($sel_val);
	if (count($readvalues)>0)
	{
		while (list($key,$value) = @each($readvalues))
		{
			$sel	="";
			$checked	= '';
//echo "key=$sel_val[$key]<br>";			
			if(@in_array($key,$sel_val))
			{
				$sel = "selected";
				$selected="selected";
				$checked = "checked";
			}
//echo $sel;
			$str	.= preg_replace("/<{(.*?)}>/e","$$1",$match);
		}

		$template	= preg_replace("/$loopstart(.*?)$loopstop/s",$str,$template);
		

	}
	return $template;	
}
//----- function pulldown_replace ends


//---------------function  fro page break------------------

function print_pgbreak($db_object,$lnk,$count,$returncontent,$result)
{


$value= ceil($count / $result);

preg_match ("/<{page_loopstart}>(.*?)<{page_loopend}>/s" , $returncontent , $cmtitle);

	$displayresult=$cmtitle[0];


for($x=1;$x<=$value;$x++)
{

$link=$lnk."&fPage=".$x;
$page=$x;


$string3.=preg_replace("/<{(.*?)}>/e","$$1",$displayresult);



$link="";	
}

	$returncontent=preg_replace ("/<{page_loopstart}>(.*?)<{page_loopend}>/s" , $string3 , $returncontent);


return $returncontent;	


}





//---------------------------function for location


function list_category($db_object,$common,$catid,$app,$match_arr)
{

static $twodarr;
static $twodcnt = 0;
static $category_array;
static $return_string;

static $no=0;

$category_table=$this->prefix_table("location");
$catrelate_table=$this->prefix_table("location_relate");

$app=$app."&nbsp;--";

if($catid==null)
	{
$catid=0;
$app="";
	}
/*$mysql="select sub_catid from $catrelate_table where main_catid='$catid'";
$below = $db_postnuke->get_single_column($mysql);*/

$mysql="select sub_id,loc_name from location_relate,location where location_relate.loc_id='$catid'
and location_relate.sub_id=location.loc_id order by loc_name";
$below = $db_object->get_rsltset($mysql);
if (count($below) > 0)
    {
for($i=0;$i<count($below);$i++)
       {
$value=$below[$i][0];
$category=$below[$i][1];
//if(@in_array($value,$match_arr))
if($value==$match_arr)
	{
$category="<option selected value=\"$value\">$app$category</option>";
	}
else
	{
$category="<option value=\"$value\">$app$category</option>";
	}
//echo $s;
$return_string.=$category;
$category_array[$catid][$value]=$category;
$this->list_category($db_object,$common,$value,$app,$match_arr);

$str=<<<EOD

EOD;
echo $str;
       }
    }
//   return $category_array;
/*
    if($location_id=="")
    {
    	$return_string=$this->return_location_for_display($db_object);
    }
    else
    {
$return_string=$this->return_location_for_display($db_object,$location_id);
    }*/
   return $return_string;

  }


//function ends

//------------------------------------------------------------------
function where_am_i($gbl_files,$error_msg)
{

	return ;

//print_r($gbl_files);

//--This should be uncommented for local	
$dir1 = substr(strrchr(getcwd(), "\\"), 1);
//--This should be uncommented for remote
//$dir1 = substr(strrchr(getcwd(), "//"), 1);

$str= "<table><tr>";
$str.="<td class=code>";
$str.= "<b>";
$str.= $error_msg['cYouarein'];
$str.= "</b>";
$str.= "</td><td class=code>";
$text=strtoupper($dir1);
$str.= $text;
$str.= " MODULE ";
$str.= "</td>";
$filename=$_SERVER['PHP_SELF'];
$filename = substr(strrchr($filename, "/"), 1);

/*
$filename=preg_replace("/_/s"," ",$filename);*/


$fl=split(".php",$filename);
$filenametemp=$fl[0];
$filename1=$gbl_files[$dir1][$filenametemp];
if($filename1=="")
{
	$filename1=$filename;
}

echo "<td class=code>";
echo "<b>";
echo $error_msg['cAndthepageis'];
echo "</b>";
echo "</td><td class=code>";
echo strtoupper($filename1);
echo "</td></tr>";
echo "</table>";

}

//-------- Similar to simpleloopprocess
/*
	Values to this function needs to be the same as SLP
	The values to the $sel_arr should be 2D array.
	For ex: If you need to send the values '1','2' for the loop 'some_loop'
	then you need to send it as 
	
		$sel_arr['some_loop']	= array('1','2');
		
		If you need to send only one value to sel_arr even then you need to 
		send it as an array
		
		$sel_arr['some_loop']	= array('a');
		
		The match in the template should be <{selected}> or <{checked}>, to 
		select or check a pariticular value.
		
*/


function multipleloop_replace($db,$template,$xArray,$sel_arr)
{
	$out_count	= count($xArray);

	while (list($outk,$outv) = @each($xArray))
	{

		$outstart	= '<{'.$outk.'start}>';
		$outstop	= '<{'.$outk.'end}>';

		$select_arr	= $sel_arr["$outk"];

		preg_match("/$outstart(.*?)$outstop/s",$template,$mat);
		$mat	= $mat[1];
		
		
		$cnt	= count($outv);
		
		$i=0;
		$str	= '';
		while ($i<$cnt)
		{
			$rec	= $outv[$i];
			
			$arr_keys	= @array_keys($rec);
			$selected	= '';
			$checked	= '';
				
			while (list($k,$v) = @each($arr_keys))
			{
				$temp	= $v;
				$$temp	= $rec["$temp"];

				$temp1	= $$temp;

				if (@in_array($temp1,$select_arr))
				{

					$selected = 'Selected';
					$checked  = 'Checked';
				}
					
			}
			$str	.= preg_replace("/<{(.*?)}>/e","$$1",$mat);

			while (list($k,$v) = @each($arr_keys))
			{
				$temp	= $v;
				$$temp	= '';
			}			
			
			$i++;
		}
		$template	= preg_replace("/$outstart(.*?)$outstop/s",$str,$template);
	}
	return $template;
}
//------ Function ends

// Similar to simpleloopprocess but can even select and replaces only the matched results
// (not unmatched results as SLP)
// I think it can also be used to replace nested loops. [Not tried it, yet ;) ]
/*
NESTED LOOP:
	In nested loop the order in which you assign the values to $xArray is important
	First assign the inner loop values and then assign the outer loop values.
*/
/*
	$sel_arr is the array containing select values and should be of the form 

		$sel_arr[<{loop_index}>] = array('field_name'=>array(<{sel_values}>));
		
		Even if there is only one element to select, you need to send it as an array.

	$xArray is the array content of the form 

		$xArray[<{loop_index}>] = array(<{2Darray}>);
*/		


function multipleselect_replace($db,$template,$xArray,$sel_arr)
{
	$out_count	= count($xArray);
	
	while (list($outk,$outv) = @each($xArray))
	{

		$outstart	= '<{'.$outk.'start}>';
		$outstop	= '<{'.$outk.'end}>';

		$select_arr	= $sel_arr["$outk"];

		preg_match("/$outstart(.*?)$outstop/s",$template,$mat);
		$mat	= $mat[1];
		
		$cnt	= count($outv);
		
		$i=0;
		$str	= '';
		while ($i<$cnt)
		{
			$rec	= $outv[$i];
			$arr_keys	= @array_keys($rec);
			$selected	= '';
			$checked	= '';
		
			while (list($k,$v) = @each($arr_keys))
			{
				$temp	= $v;
				$$temp	= $rec["$temp"];

				$temp1	= $$temp;


				if (is_string($v))	//	Only if the field name is of string datatype
				{
//echo "$$temp = ".$rec[$temp]."<br>";
					
					$temp_sel_arr	= $select_arr[$v]; //	If there is an array for the current fieldname
					
//print_r($temp_sel_arr);	//	this is the select array						
//echo "<br>";
					if (is_array($temp_sel_arr))
					{
						if (@in_array($temp1,$temp_sel_arr))	// Search the array and if found replace "select"
						{
							$selected = 'Selected';
							$checked  = 'Checked';
						}
					}
					

				}
				
					

			}
			$str	.= preg_replace("/<{(.*?)}>/e","$$1",$mat);
			
			$i++;
		}
		$template	= preg_replace("/$outstart(.*?)$outstop/s",$str,$template);
	}
	return $template;
}
//------ Function ends




//------------------------------------------------
//To show usernames of all the employees in the system (EXTERNAL CANDIDATES ARE NOT CONSIDERED)

function show_Username($db_object,$returncontent,$loopname)
{
$user_table = $this->prefix_table("user_table");

$username = $this->name_display($db_object,$user_id);

$mysql = "select user_id from $user_table where user_id <> 1 and user_type = 'employee'";
$user_arr1 = $db_object->get_single_column($mysql);
$user_id_full = @implode("','",$user_arr1);

$mysql = "select user_id,username from $user_table where user_id in ('$user_id_full')";
$user_arr = $db_object->get_rsltset($mysql);
	
//The username is changed so that the firstname,lastname ... which the admin has selected in the core panel is displayed...
	for($i=0;$i<count($user_arr);$i++)
	{
	$user_id = $user_arr[$i]['user_id'];
	$user_arr[$i]['username'] = $this->name_display($db_object,$user_id);

	}

$values[$loopname] = $user_arr;
$returncontent	= $this->multipleloop_replace($db_object,$returncontent,$values,'');
return $returncontent;
}

//------------------------------------------------
//====== This function is a clone of direct_replace except that it replaces a range

function direct_replace_range($db_object,$read,$xArray,$start,$stop)
{
	preg_match("/$start(.*?)$stop/s",$read,$match);
	$match	= $match[1];
	@reset ($xArray);
	while(list($key,$value)=@each($xArray))
	{
		$$key=$value;
	}
	$content	= preg_replace("/{{(.*?)}}/e","$$1",$match);

	
	$fullcontent = preg_replace("/$start(.*?)$stop/s",$content,$read);
	return $fullcontent;
}

function expectation_met($db_object,$default,$user_id,$gbl_met_value,$o_id,$dates)
	{
	
		
		$config_table=$this->prefix_table("config");	
		
		$approveduser_objective=$this->prefix_table("approveduser_objective");
		
		$approved_feedback=$this->prefix_table("approved_feedback");
		
		$rating_table=$this->prefix_table("rating");
		
		$boss=0;
			
		$conqry = "select person_affected from $config_table";

		$conres = $db_object->get_a_line($conqry);

		$noofperson = $conres['person_affected'];

		$boss = 1;
	
//Total rater is 4 (without self),noofperson(the raters we have selected) + boss (boss's rating)

		$totalperson = $noofperson + $boss ;

//" gbl_met_value " - Global value we have given for expectation met(constant)

		$ratqry = "select rval from $rating_table where rval='$gbl_met_value'";

		$ratres = $db_object->get_a_line($ratqry);
		
		$r_val = $ratres['rval'];
		
//met expectation point

		$metexpectation = $r_val * $totalperson;
		//echo $metexpectation;
//get all  metrics for the given o_id

			$oqry = "select met_id from $approveduser_objective where o_id='$o_id' and 

				user_id='$user_id'";

			$ores = $db_object->get_a_line($oqry);

			$met_id = $ores['met_id'];

			$mqry = "select o_id from $approveduser_objective where met_id='$met_id' and 

				user_id='$user_id'";

			$mres = $db_object->get_single_column($mqry);

			$aver  = count($mres);

			$oid = @implode("','",$mres);

//get the raters rated value
			
			$Ratervalue = "select sum(r_id) from $approved_feedback where o_id in ('$oid')

					 and user_id='$user_id' and status<>'1' and status<>'2' $dates";
					 
					 

			$Resvalue = $db_object->get_single_column($Ratervalue);
		
			$actual = $Resvalue[0];

			$actual = @($actual/$aver);

//calculation for met expectation value

			$expected = @($actual/$metexpectation);	
			
			$expected = @sprintf("%01.2f",$expected);
			
			$expected=$expected*100;
			
			return($expected);
}
//
function return_access_rights($db_object,$user_id)
	{
		
		$user_table=$this->prefix_table("user_table");
	
		$employment_type=$this->prefix_table("employment_type");
		
		$ext_qry="select id from $employment_type where external_candidate='yes'";
		
		$ext_res=$db_object->get_a_line($ext_qry);
	
		$ext_cand=$ext_res[id];
		
		$qry="select employment_type,user_type from $user_table where user_id='$user_id'";
	
		$result=$db_object->get_a_line($qry);
		
		$emp_type=$result[employment_type];
		
		$user_type=$result[user_type];

		if($ext_cand==$emp_type)
		{
			
			$up_qry="update $user_table set user_type='external' where user_id='$user_id'";
			
			$db_object->insert($up_qry);
		}
	
		if(($user_type=="") && ($emp_type==""))
		{
			return("gbl_personal_array");
		}
	
		if($user_type=="external")
		{
			return("gbl_external_array");
				
		}
	
		if($emp_type=='1')
		{
		
			return("gbl_full_array");
		}
	
		if($emp_type=='2')
		{

			return("gbl_part_array");
		}
		if($emp_type=='3')
		{
			return("gbl_contract_array");
		}
		if($emp_type=='4')
		{
			return("gbl_seasonal_array");
		}
		if($emp_type=='5')
		{
			return("gbl_ext_array");
		}
	}
//==================================

	function return_direct_reports($db_object,$rater_id)
	{

	$user_table=$this->prefix_table("user_table");

	$mysql="select position from 

	$user_table where user_id='$rater_id' ";
	
	$a_position=$db_object->get_a_line($mysql);

	$pos_id=$a_position[0];

	/*

	

	$mysql="select boss_no from $position where pos_id='$pos_id' ";

	$a_boss=$db_object->get_a_line($mysql);

	$boss_id=$a_boss[0];

	*/
	$position=$this->prefix_table("position");

	$mysql="select pos_id from $position where boss_no='$pos_id' ";

	$a_positions=$db_object->get_single_column($mysql);
	
	
	$position_string=@implode(",",$a_positions);


	if($position_string!="")

	{

	$mysql="select user_id from $user_table 

	where position in ($position_string) ";


	$a_users=$db_object->get_single_column($mysql);

	}

	
	return $a_users;	

	}
	
function career_killers($db_object,$common,$users,$gbl_grouprater_inter)
{
	$underrated_skill=array();
	$overrated_skill=array();
	$kill_skills=array();
	for($a=0;$a<count($users);$a++)
	{
		$highest=array();
		
		$user_id=$users[$a];

	$skills = $common->prefix_table('skills');
	$textqsort_rating = $common->prefix_table('textqsort_rating');
	$other_raters = $common->prefix_table('other_raters');
	$mysql = "select skill_id,skill_name from $skills where skill_type = 'i'";

		$skills_arr = $db_object->get_rsltset($mysql);
		
	
		for($i=0;$i<count($skills_arr);$i++)
		{
			
			$skill_id = $skills_arr[$i]['skill_id'];
			$skill_name = $skills_arr[$i]['skill_name'];

		
	
			$self_arr = array("grp_self" => "Self");
			$grp_arr = @array_diff($gbl_grouprater_inter,$self_arr);  //$group_arr
		
			$count_grps = count($grp_arr);
 

			
				
				
			while(list($kk,$vv) = @each($grp_arr))
			{
				$mysql = "select $textqsort_rating.rater_label_no 
					from $textqsort_rating,$other_raters
					where $textqsort_rating.rated_user = $other_raters.cur_userid
					and $textqsort_rating.rater_id = $other_raters.rater_userid
					and $textqsort_rating.skill_id = '$skill_id'
					and other_raters.cur_userid = '$user_id' 
					and other_raters.group_belonging = '$kk'";  

				
					$alllabels_arr = $db_object->get_single_column($mysql);

					
					$ratingcount = count($alllabels_arr);
					
					$totalrating = 0;
		 		
					$label[$kk] = $alllabels_arr[0];//$kk
	
					
					if($ratingcount >= 1)
					{
					
						for($n=0;$n<count($alllabels_arr);$n++)
						{
						  
							$rating 	= $alllabels_arr[$n];
							$totalrating 	+= $rating; 
						
						}
						$avg 		= $totalrating / $ratingcount;
			
						$label[$kk] = floor($avg); //$kk
					}
			}
			
			$total_labels = 0;
		  
			@reset($label);
			while(list($kk,$vv) = @each($label))	
			{
			
				$label_id = $label[$kk];  
				$total_labels += $label_id;
			
			
			
			}
	 
			if($count_grps !=0)
			{
			$avg_labels = $total_labels / $count_grps;
			}
			$avg_rating = round($avg_labels,2);
		 
		
			$highest[$skill_id] = $avg_rating;
	 
	//query for overrated skill display...
		
			$mysql = "select rater_label_no from $textqsort_rating where rater_id = '$user_id' and rated_user = '$user_id' and skill_id = '$skill_id'";
			$self_rating_arr = $db_object->get_a_line($mysql);		

	 
			$self_rating[$skill_id] = $self_rating_arr['rater_label_no'];
			$allothers_avg_rating[$skill_id] = $avg_rating;	
		
		}

	 

		//Sorting the average to find the highest average of them all...
		
		$highest_val = $highest;
		@rsort($highest_val,SORT_NUMERIC);
		$highest_avg = $highest_val[0];
	
 
	
		$one_third_of_avg = $highest_avg/3;
	
	 							
		$killer_skills=array();				
		
		while(list($key,$val) = @each($highest))
		{
		
			if($highest[$key] <= $one_third_of_avg)
			{
				$killer_skills[] = $key;

				
		
			}
		$kill_skills[$a][count]=count($killer_skills);
		
		$kill_skills[$a][user_id]=$user_id;
		
		}
		



	
}

	return($kill_skills);

}

}


$post_var1=$_POST;
$get_var1=$_GET;

$adt="";

while(list($key,$value)=each($post_var1))
{
$$key=$value;
$post_var["$key"]=$value;
	$adt.="&$key=$value";

}
while(list($key,$value)=each($get_var1))
{
$$key=$value;
$post_var["$key"]=$value;
	$adt.="&$key=$value";
}





?>
